// decompiled Assembly-CSharp.dll, class: GameSave, method: LoadCurrentGame(String): Boolean

// majorGameVersion: 0
// minorGameVersion: 10
// releaseGameVersion: 31
// buildGameVersion: 24710

// For file syntax, please refer to generator.py (it should be simple enough)

// removed all backward compatibility :D, no need for it

Vector2 {
  float32 x
  float32 y
}

Vector3 {
  float32 x
  float32 y
  float32 z
}

Quaternion {
  float32 x
  float32 y
  float32 z
  float32 w
}

VectorLF3 {
  float64 x
  float64 y
  float64 z
}

DataPool<T> {
  int32 capacity
  int32 cursor
  int32 recycleCursor
  T buffer[cursor - 1]
  int32 recycleIds[recycleCursor]
}

DataPoolRenderer<T> { // same as DataPool
  int32 capacity
  int32 cursor
  int32 recycleCursor
  T buffer[cursor - 1]
  int32 recycleIds[recycleCursor]
}

KeyValuePair<T1, T2> {
  T1 key
  T2 value
}

ObjectPool<T> {
  int32 capacity
  int32 cursor
  int32 recycleCursor
  ExportStruct<int32, T> buffer[cursor - 1]
  int32 recycleIds[recycleCursor]
}

ExportStruct<IndexType, ValueType> {
  IndexType index
  ValueType data if (index != 0)
}

// ObjectPool_ExportStruct<T> {
//  int32 index
//  T data if (index != 0)
// }


// cspell:ignore prefs,struct,proto,vfsave,mecha,astro,piler,inhand,coef,respawn,rgba,voxel,samp,voxels,navi,prebuild,vege,fireice,crysrub,grat,spraycoater,fractinator,datas,rgbaf,hsvaf,maxt,posr,polyn,polynu
// cspell:ignoreRegExp [a-z]axis

GameSave {
  VFSaveHeader header
  int64 fileLength
  int32 version = 7
  boolean isSandboxMode // version >= 7
  boolean isPeaceMode // version >= 7
  int32 majorGameVersion
  int32 minorGameVersion
  int32 releaseGameVersion
  int32 buildGameVersion // version >= 6
  int64 gameTick
  int64 nowTicks
  int32 sizeOfPngFile
  uint8 screenShotPngFile[sizeOfPngFile]
  AccountData accountData // version >= 5
  uint64 dysonSphereEnergyGenCurrentTick // version >= 5
  GameData gameData
}

VFSaveHeader {
  // "VFSAVE" string
  uint8 magic0 = 86
  uint8 magic1 = 70
  uint8 magic2 = 83
  uint8 magic3 = 65
  uint8 magic4 = 86
  uint8 magic5 = 69
}

AccountData {
  int32 version = 0
  int32 platform // Standalone: 0, Steam: 1, WeGame: 2
  uint64 userId
  string userName
}

GameData {
  int32 version = 11
  int32 patch = 19 // version >= 4
  AccountData accountData // repeated, version >= 3
  string gameName
  GameDesc gameDesc
  int64 gameTick
  GameAchievementData gameAchievement // version >= 7
  GamePrefsData preferences // version >= 1
  GameHistoryData history
  boolean hidePlayerModel // version >= 2
  boolean disableController // version >= 2
  GameStatData statistics
  int32 planetId
  Player mainPlayer
  int32 factoryCount
  GalacticTransport galacticTransport
  TrashSystem trashSystem // version >= 5
  PlanetFactory factories[factoryCount]
  int32 dysonSpheresCount
  ExportStruct<int32, DysonSphere> dysonSpheres[dysonSpheresCount]
  SpaceSector spaceSector // version >= 10
  int32 zero1 = 0
  int32 zero2 = 0
  GameAbnormalityData gameAbnormality // GameAbnormalityData_0925
  MilestoneSystem milestoneSystem // version >= 7
  GoalSystem goalSystem // version >= 11
  WarningSystem warningSystem // version >= 9
}

GoalSystem {
  int32 version = 0
  int32 numGoalDatas
  KeyValuePair<int32, GoalData> goalDatas[numGoalDatas]
  int32 queueCursor
  int32 goalQueue[queueCursor]
}

GoalData {
  int32 version = 0
  int32 protoId
  int64 currentValue
  int64 targetValue
  int32 stage // EGoalStage { Disabled, Enabled, Ignored, Completed }
  boolean isManualIgnore
  int32 numDisplayingState
  boolean displayingState[numDisplayingState]
  boolean isPatched
}

// used in GameData, inlined
DysonSphereData {
  int32 available
  DysonSphere dysonSphere if (available == 1)
}

GameDesc {
  int32 version = 9
  int64 creationTick // version >= 3
  int32 creationVersionMajor // version >= 6
  int32 creationVersionMinor // version >= 6
  int32 creationVersionRelease // version >= 6
  int32 creationVersionBuild // version >= 5
  int32 galaxyAlgo
  int32 galaxySeed
  int32 starCount
  int32 playerProto
  float32 resourceMultiplier // version >= 2
  int32 numSavedThemeIds // version >= 1
  int32 savedThemeIds[numSavedThemeIds] // version >= 1
  boolean achievementEnable // version >= 4
  boolean isPeaceMode // version >= 7
  boolean isSandboxMode // version >= 7
  CombatSettings combatSettings // version >= 8
  int32 goalLevel // version >= 9 EGoalLevel { None, Off, Key, Full }
}

CombatSettings {
  int32 version = 0
  float32 aggressiveness
  float32 initialLevel
  float32 initialGrowth
  float32 initialColonize
  float32 maxDensity
  float32 growthSpeedFactor
  float32 powerThreatFactor
  float32 battleThreatFactor
  float32 battleExpFactor
}

GameAchievementData {
  int32 version = 0
  int32 num
  GameAchievementRuntimeData data[num]
}

// used in GameAchievementData, inlined
GameAchievementRuntimeData {
  int32 id
  AchievementRuntimeData_Fractinator dataFractinator if (id == 73)
  AchievementRuntimeData_MechaShieldResist dataMechaShieldResist if (id == 116)
}

AchievementRuntimeData_Fractinator {
  int16 baseId
  int16 version = 0
  int64 progress
  int32 capacity
  int32 factoryCount
  int64 heavyHydSamp[factoryCount * 600]
  int64 productFix[factoryCount]
}

AchievementRuntimeData_MechaShieldResist {
  int32 version = 0
  int32 baseId
  int32 timer
  int32 historyResistLength
  int64 historyResist[historyResistLength]
}

// used in GameData
GamePrefsData {
  int32 version = 15
  VectorLF3 cameraUPos
  Quaternion cameraURot
  int32 reformBrushSize // version >= 1
  int32 reformBrushType // version >= 4
  int32 reformBrushDecalType // version >= 7
  int32 reformBrushColor // version >= 4
  int32 numReplicatorMultipliers // version >= 1
  KeyValuePair<int32, int32> replicatorMultipliers[numReplicatorMultipliers] // version >= 1
  boolean detailPower // version >= 1
  boolean detailVein // version >= 1
  boolean detailSpaceGuide // version >= 1
  boolean detailDefense // version >= 10
  boolean detailSign // version >= 1
  boolean detailIcon // version >= 1
  int32 numTutorialsShowing // version >= 2
  int32 tutorialsShowing[numTutorialsShowing] // version >= 2
  int32 numAstroNames // version >= 5
  AstroName astroNames[numAstroNames] // version >= 5
  int32 numPickFilters // version >= 10
  KeyValuePair<int32, int32> pickFilters[numPickFilters] // version >= 10
  int32 numEnemyDropBans // version >= 10
  int32 enemyDropBans[numEnemyDropBans] // version >= 10
  int32 numTrackedEnemyClusters // version >= 11
  int32 trackedEnemyClusters[numTrackedEnemyClusters] // version >= 11
  int32 upgradeLevels // version >= 4
  int16 upgradeCursorType // version >= 4
  int16 upgradeCursorSize // version >= 4; clip in range [1, 11]
  boolean upgradeFilterFacility // version >= 4
  boolean upgradeFilterBelt // version >= 4
  boolean upgradeFilterInserter // version >= 4
  int16 dismantleCursorType // version >= 4
  int16 dismantleCursorSize // version >= 4; clip in range [1, 11]
  boolean dismantleFilterFacility // version >= 4
  boolean dismantleFilterBelt // version >= 4
  boolean dismantleFilterInserter // version >= 4
  boolean dysonSphereHideFarSideInEditor // version >= 6
  boolean dysonSphereHideRocketBodies // version >= 8
  boolean techTreeShowProperty // version >= 9
  int32 turretBurstMode // version >= 10
  int32 fastBuildBatchSize // version >= 12
  boolean sandboxIsDirectlyObtain // version >= 13
  boolean sandboxDirectlyObtainIsStack // version >= 13
  ControlPanelFilter uiControlPanelFilter // version >= 14, in SaveUIControlPanelWindowPrefs
  int32 numUiControlPanelAstroExpands // version >= 14
  int32 uiControlPanelAstroExpands[numUiControlPanelAstroExpands] // version >= 14
  int64 uiControlPanelInterstellarPairing // version >= 14
  int64 uiControlPanelIntraplanetaryPairing // version >= 14
  int32 uiControlPanelIntraplanetaryPairingPlanetId // version >= 14
  int64 uiControlPanelDispenserPairing // version >= 14
  int32 uiControlPanelDispenserPairingPlanetId // version >= 14
  int32 uiGoalPanelState // version >= 15 EUIGoalPanelState { None, Closed, Collapse, Expand }
}

// used in GamePrefsData
AstroName {
  int32 id
  string name
}

ControlPanelFilter {
  int32 version = 0
  int32 typeFilter // EEntryFilter {None = 0, InterstellarStation = 2, OrbitCollector = 4, InterstellarStationAndCollector = 6, LocalStation = 8, IntraplanetaryStation = 10, VeinCollector = 16, IntraplanetStationAndCollector = 26, AnyStation = 30, Dispenser = 32}
  int32 astroFilter
  int32 numItemsFilter
  int32 itemsFilter[numItemsFilter]
  int32 stateFilter
  string searchFilter
  int32 sortFilter // ESortMethod { Default, AstroDistance }
}

GameHistoryData {
  int32 version = 17
  int32 numRecipeUnlocked
  int32 recipeUnlocked[numRecipeUnlocked]
  int32 numEnemyDropItemUnlocked // version >= 11
  int32 enemyDropItemUnlocked[numEnemyDropItemUnlocked] // version >= 11
  int32 numTutorialUnlocked // version >= 2
  int32 tutorialUnlocked[numTutorialUnlocked] // version >= 2
  int32 numFeatureKeys
  int32 featureKeys[numFeatureKeys]
  int32 numFeatureValues // version >= 5
  KeyValuePair<int32, int32> featureValues[numFeatureValues] // version >= 5
  JournalSystem journalSystem // version >= 6
  int32 numTechState
  TechState techState[numTechState]
  boolean autoManageLabItems
  int32 currentTech
  int32 numTechQueue // version >= 1
  int32 techQueue[numTechQueue] // version >= 1
  int32 universeObserveLevel
  int32 blueprintLimit // version >= 4
  float32 solarSailLife
  float32 solarEnergyLossRate
  boolean useIonLayer
  int32 inserterStackCountObsolete
  int32 inserterStackInput // version >= 14
  int32 inserterStackOutput // version >= 14
  boolean inserterBidirectional // version >= 14
  boolean beltVerticalConstruction // version >= 15
  float32 constructionDroneSpeed // version >= 11
  int32 constructionDroneMovement // version >= 11
  int32 autoReconstructSpeed // version >= 11
  float32 logisticDroneSpeed
  float32 logisticDroneSpeedScale
  int32 logisticDroneCarries
  float32 logisticShipSailSpeed
  float32 logisticShipWarpSpeed
  float32 logisticShipSailSpeedScale
  boolean logisticShipWarpDrive
  int32 logisticShipCarries
  float32 logisticCourierSpeed // version >= 10
  float32 logisticCourierSpeedScale //version >= 10
  int32 logisticCourierCarries // version >= 10
  float32 dispenserDeliveryMaxAngle // version >= 10
  float32 miningCostRate
  float32 miningSpeedScale
  int32 storageLevel
  int32 labLevel
  int32 techSpeed
  float32 dysonNodeLatitude
  int32 dysonNodeAbsorbInterval // version >= 16
  int64 universeMatrixPointUploaded
  boolean missionAccomplished
  int32 stationPilerLevel // version >= 7
  int32 remoteStationExtraStorage // version >= 7
  int32 localStationExtraStorage // version >= 7
  float32 kineticDamageScale // version >= 11
  float32 energyDamageScale // version >= 11
  float32 blastDamageScale // version >= 11
  float32 magneticDamageScale // version >= 11
  int64 planetaryATFieldEnergyRate // version >= 11
  float32 globalHpEnhancement // version >= 12
  float32 enemyDropScale // version >= 13
  int32 groundFleetPortCount // version >= 11
  int32 spaceFleetPortCount // version >= 11
  float32 combatDroneDamageRatio // version >= 11
  float32 combatDroneROFRatio // version >= 11
  float32 combatDroneDurabilityRatio // version >= 11
  float32 combatDroneSpeedRatio // version >= 11
  float32 combatShipDamageRatio // version >= 11
  float32 combatShipROFRatio // version >= 11
  float32 combatShipDurabilityRatio // version >= 11
  float32 combatShipSpeedRatio // version >= 11
  float32 fighterInitializeSpeedScale // version >= 11
  float32 minimalPropertyMultiplier // version >= 11
  float32 minimalDifficulty // version >= 11
  int64 dfTruceTimer // version >= 11
  CombatSettings combatSettings // version >= 11
  int32 numPropertyDataProduction // version >= 8
  KeyValuePair<int32, int32> propertyDataProduction[numPropertyDataProduction] // version >= 8, key: itemId, value: count
  int32 numPropertyDataConsumption // version >= 8
  KeyValuePair<int32, int32> propertyDataConsumption[numPropertyDataConsumption] // version >= 8, key: itemId, value: count
  boolean hasUsedPropertyBanAchievement // version >= 11
  boolean createWithSandboxMode // version >= 9
}

TechState {
  int32 id
  boolean unlocked
  int32 curLevel
  int32 maxLevel
  int64 hashUploaded
  int64 hashNeeded
  int64 unlockTick // added at GameHistoryData version 17
}

JournalSystem {
  int32 version = 0
  int32 num
  JournalData data[num]
}

JournalData {
  int32 version = 0
  int32 patternId
  int32 num
  int64 parameters[num]
}

GameStatData {
  int32 version = 2
  int32 numTechHashedHistory
  int32 techHashedHistory[numTechHashedHistory]
  ProductionStatistics statistics
  KillStatistics kill // version >= 1
  TrafficStatistics traffic // version >= 2
}

ProductionStatistics {
  int32 version = 0
  int32 factoryCount
  FactoryProductionStat factoryStatPool[factoryCount]
  int32 numFirstCreateIds
  int32 firstCreateIds[numFirstCreateIds]
  int32 numFavoriteIds
  int32 favoriteIds[numFavoriteIds]
}

KillStatistics {
  int32 version = 0
  int32 numStarKillStatPool
  ExportStruct<uint8, AstroKillStat> starKillStatPool[numStarKillStatPool]
  int32 numFactoryKillStatPool
  ExportStruct<uint8, FactoryKillStat> factoryKillStatPool[numFactoryKillStatPool]
  ExportStruct<uint8, MechaKillStat> mechaKillStat
  int32 numFavoriteIds
  int32 favoriteIds[numFavoriteIds]
}

AstroKillStat {
  int32 version = 0
  ExportStruct<uint8, KillStat> killStatPool[2048]
}

FactoryKillStat {
  int32 version = 0
  ExportStruct<uint8, KillStat> killStatPool[2048]
}

MechaKillStat {
  int32 version = 0
  ExportStruct<uint8, KillStat> killStatPool[2048]
}

KillStat {
  int32 version = 0
  int32 numCount // const 3600
  int32 count[numCount] // use UnsafeIO.WriteInt32Array
  int32 numCursor // const 6
  int32 cursor[numCursor]
  int32 numTotal // const 7
  int32 total[numTotal]
  int32 modelIndex
}

FactoryProductionStat {
  int32 version = 1
  int32 productCapacity
  int32 productCursor
  ProductStat productPool[productCursor - 1]
  int32 numPowerPool
  PowerStat powerPool[numPowerPool]
  int32 numProductIndices  // length: 12000
  int32 productIndices[numProductIndices]
  int64 energyConsumption // version >= 1
}

ProductStat {
  int32 version = 1
  int32 numCount // = 7200
  int32 count[numCount]
  int32 numCursor // = 12
  int32 cursor[numCursor]
  int32 numTotal // = 14
  int64 total[numTotal] // version >= 1
  // int32 totalNonUsed[numTotal] if (version == 0)  // changed in ver 1: int32 -> int64
  int32 itemId
}

PowerStat {
  int32 version = 0
  int32 numEnergy // = 3600
  int64 energy[numEnergy]
  int32 numCursor // = 6
  int32 cursor[numCursor]
  int32 numTotal // = 6
  int64 total[numTotal]
}

TrafficStatistics {
  int32 version = 0
  int32 numStarTrafficPool
  ExportStruct<uint8, AstroTrafficStat> starTrafficPool[numStarTrafficPool]
  int32 numFactoryTrafficPool
  ExportStruct<uint8, AstroTrafficStat> factoryTrafficPool[numFactoryTrafficPool]
}

AstroTrafficStat {
  int32 version = 0
  int32 trafficCapacity
  int32 trafficCursor
  TrafficStat trafficPool[trafficCursor - 1]
  int32 numItemIndices // fixed 12000
  int32 itemIndices[numItemIndices]
}

TrafficStat {
  int32 version = 0
  int32 numCount // fixed 720
  int32 count[numCount]
  int32 numCursor // fixed 12
  int32 cursor[numCursor]
  int32 numTotal // fixed 14
  int64 total[numTotal]
  int32 itemId
}

Player {
  int32 version = 6
  int32 planetId
  int32 packageColCount // version >= 6
  boolean isAlive // version >= 4
  int32 deathCount // version >= 4
  int32 invincibleTicks // version >= 5
  Vector3 position
  VectorLF3 uPosition
  Quaternion uRotation
  int32 movementState // EMovementState { Walk, Drift, Fly, Sail }
  float32 warpState
  boolean warpCommand
  VectorLF3 uVelocity
  int32 inhandItemId
  int32 inhandItemCount
  int32 inhandItemInc // version >= 2
  Mecha mecha
  StorageComponent package
  DeliveryPackage deliveryPackage // version >= 3
  PlayerNavigation navigation // version >= 1
  int64 sandCount // changed to int64 after version 4
}

DeliveryPackage {
  int32 version = 0
  int32 gridCount
  int32 stackSizeMultiplier
  DeliveryPackageGrid grid[gridCount]
  boolean enable
  boolean unlocked
  int32 rowCount // maximum 20
  int32 colCount // maximum 5
}

// inlined
DeliveryPackageGrid {
  int32 itemId
  int32 count if (itemId > 0)
  int32 inc if (itemId > 0)
  int32 ordered if (itemId > 0)
  int32 stackSize if (itemId > 0)
  int32 requiredCount if (itemId > 0)
  int32 recycleCount if (itemId > 0)
}

Mecha {
  int32 version = 10
  float64 coreEnergyCap
  float64 coreEnergy
  float64 corePowerGen
  float64 reactorPowerGen
  float64 reactorEnergy
  int32 reactorItemId
  int32 reactorItemInc // version >= 4
  boolean autoReplenishFuel // version >= 7
  StorageComponent reactorStorage
  StorageComponent warpStorage
  float64 energyConsumptionCoef // version >= 8
  float64 walkPower
  float64 jumpEnergy
  float64 thrustPowerPerAcc
  float64 warpKeepingPowerPerSpeed
  float64 warpStartPowerPerSpeed
  float64 miningPower
  float64 replicatePower
  float64 researchPower
  float64 droneEjectEnergy
  float64 droneEnergyPerMeter
  float64 instantBuildEnergy // version >= 7
  int32 coreLevel
  int32 thrustLevel
  float32 miningSpeed
  float32 replicateSpeed
  float32 walkSpeed
  float32 jumpSpeed
  float32 maxSailSpeed
  float32 maxWarpSpeed
  float32 buildArea
  MechaForge forge
  MechaLab lab
  ConstructionModuleComponent constructionModule // version >= 7
  Vector3 autoReconstructLastSearchPos // version >= 10
  int32 autoReconstructLastSearchAstroId // version >= 10
  Vector3 buildLastSearchPos // version >= 10
  int32 buildLastSearchAstroId // version >= 10
  Vector3 repairLastSearchPos // version >= 10
  int32 repairLastSearchAstroId // version >= 10
  int32 hpMax // version >= 7
  int32 hpMaxUpgrade // version >= 8
  int32 hpRecover // version >= 7
  boolean energyShieldUnlocked // version >= 7
  boolean energyShieldRechargeEnabled // version >= 7
  float32 energyShieldRechargeSpeed // version >= 7
  float32 energyShieldRadius // version >= 7
  int64 energyShieldCapacity // version >= 7
  int64 energyShieldEnergyRate // version >= 7
  int32 hp // version >= 7
  int32 hpRecoverCD // version >= 7
  int32 energyShieldRecoverCD // version >= 7
  int64 energyShieldEnergy // version >= 7
  boolean energyShieldBurstUnlocked // version >= 10
  int64 energyShieldBurstDamageRate // version >= 10
  int32 ammoItemId // version >= 7
  int32 ammoInc // version >= 7
  int32 ammoBulletCount // version >= 7
  int32 ammoSelectSlot // version >= 7
  int32 ammoSelectSlotState // version >= 9
  int32 ammoMuzzleFire // version >= 7
  int32 ammoRoundFire // version >= 7
  int32 ammoMuzzleIndex // version >= 7
  boolean laserActive // version >= 7
  int32 laserActiveState // version >= 9
  boolean laserRecharging // version >= 7
  int64 laserEnergy // version >= 7
  int64 laserEnergyCapacity // version >= 7
  int32 laserFire // version >= 7
  boolean bombActive // version >= 9
  int32 bombFire // version >= 7
  boolean autoReplenishAmmo // version >= 7
  StorageComponent ammoStorage // version >= 7
  StorageComponent bombStorage // version >= 7
  EnemyHatredTarget ammoHatredTarget // version >= 7
  EnemyHatredTarget laserHatredTarget // version >= 7
  float32 bulletLocalAttackRange // version >= 7
  float32 bulletSpaceAttackRange // version >= 7
  int32 bulletEnergyCost // version >= 7
  float32 bulletDamageScale // version >= 7
  int32 bulletROF // version >= 7
  int32 bulletMuzzleCount // version >= 7
  int32 bulletMuzzleInterval // version >= 7
  int32 bulletRoundInterval // version >= 7
  float32 cannonLocalAttackRange // version >= 7
  float32 cannonSpaceAttackRange // version >= 7
  int32 cannonEnergyCost // version >= 7
  float32 cannonDamageScale // version >= 7
  int32 cannonROF // version >= 7
  int32 cannonMuzzleCount // version >= 7
  int32 cannonMuzzleInterval // version >= 7
  int32 cannonRoundInterval // version >= 7
  float32 plasmaLocalAttackRange // version >= 7
  float32 plasmaSpaceAttackRange // version >= 7
  int32 plasmaEnergyCost // version >= 7
  float32 plasmaDamageScale // version >= 7
  int32 plasmaROF // version >= 7
  int32 plasmaMuzzleCount // version >= 7
  int32 plasmaMuzzleInterval // version >= 7
  int32 plasmaRoundInterval // version >= 7
  float32 missileLocalAttackRange // version >= 7
  float32 missileSpaceAttackRange // version >= 7
  int32 missileEnergyCost // version >= 7
  float32 missileDamageScale // version >= 7
  int32 missileROF // version >= 7
  int32 missileMuzzleCount // version >= 7
  int32 missileMuzzleInterval // version >= 7
  int32 missileRoundInterval // version >= 7
  float32 laserLocalAttackRange // version >= 7
  float32 laserSpaceAttackRange // version >= 7
  int32 laserLocalEnergyCost // version >= 7
  int32 laserSpaceEnergyCost // version >= 7
  int32 laserLocalDamage // version >= 7
  int32 laserSpaceDamage // version >= 7
  int32 laserLocalInterval // version >= 7
  int32 laserSpaceInterval // version >= 7
  boolean autoReplenishHangar // version >= 7
  StorageComponent fighterStorage // version >= 7
  CombatModuleComponent groundCombatModule // version >= 7
  CombatModuleComponent spaceCombatModule // version >= 7
  int32 numEnergyShieldResistHistory // version >= 7
  int64 energyShieldResistHistory[numEnergyShieldResistHistory] // version >= 7
  MechaAppearance appearance // version >= 5
  MechaAppearance diyAppearance // version >= 5
  int32 numDiyItems // version >= 6
  KeyValuePair<int32, int32> diyItems[numDiyItems] // version >= 6
  int32 constantNumber = 2119973658 // 0x7e5c3b1a
}

ConstructionModuleComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 battleBaseId
  boolean droneEnabled
  boolean droneConstructEnabled
  boolean droneRepairEnabled
  int32 droneCount
  int32 droneAliveCount
  int32 droneIdleCount
  int32 dronePriority // version >= 1
  int32 droneRespawnTick
  boolean autoReconstruct
  float32 autoReconstructAcc
  float32 baseBuildRange
  Vector3 baseEjectPos
  int32 numAutoReconstructTargets // version >= 1
  KeyValuePair<int32, float32> autoReconstructTargets[numAutoReconstructTargets] // version >= 1
  int32 autoReconstructTargetTotalCount if (numAutoReconstructTargets > 0) // version >= 1
  int32 numBuildTargets // version >= 1
  KeyValuePair<int32, float32> buildTargets[numBuildTargets] // version >= 1
  int32 buildTargetTotalCount if (numBuildTargets > 0) // version >= 1
  int32 numRepairTargets // version >= 1
  ConstructTargetExtra repairTargets[numRepairTargets] // version >= 1
  int32 repairTargetTotalCount if (numRepairTargets > 0) // version >= 1
}

ConstructTargetExtra {
  int32 objectId
  float32 value
  float32 value2
}

EnemyHatredTarget {
  uint8 version = 0
  int32 astroId
  int32 id
  int32 value
}

CombatModuleComponent {
  int32 version = 2
  int32 id
  int32 entityId
  int32 battleBaseId
  boolean moduleEnabled
  boolean autoReplenishFleet
  boolean attackRelay // version >= 2
  float32 sensorRange
  int32 tickSinceLastEnemy
  int32 fleetCount
  boolean isSpace
  int32 numModuleFleets
  ModuleFleet moduleFleets[numModuleFleets]
  int32 numModuleFleetPoses
  Pose moduleFleetPoses[numModuleFleetPoses]
}

ModuleFleet {
  int32 version = 1
  int32 fleetAstroId
  int32 fleetId
  int32 protoId
  boolean inCommand
  boolean fleetEnabled // version >= 1
  int32 numFighters
  ModuleFighter fighters[numFighters]
}

ModuleFighter {
  int32 itemId
  int32 craftId
  int32 count
  int32 size // ECraftSize (Small = 0, Large = 1)
  int16 rowInUI
  int16 colInUI
  int32 formFunc
  Vector3 formPos
  Quaternion formRot
  float32 formParam0
}

Pose {
  Vector3 position
  Quaternion rotation
}

StorageComponent {
  int32 version = 2
  int32 id
  int32 entityId
  int32 previous // version >= 1
  int32 next // version >= 1
  int32 bottom // version >= 1
  int32 top // version >= 1
  int32 type  // EStorageType { Default=0, Fuel=1, Filtered=9 }
  int32 size
  int32 bans // version >= 1
  StorageGrid grids[size] // version >= 2
}

StorageGrid {
  int32 itemId
  int32 filter
  int32 count
  int32 stackSize
  int32 inc
}

MechaForge {
  int32 version = 0
  int32 numTasks
  ForgeTask tasks[numTasks]
}

ForgeTask {
  int32 version = 0
  int32 recipeId
  int32 count
  int32 tick
  int32 tickSpend
  int32 numItemsIds
  int32 numProductIds
  ItemId itemsIds[numItemsIds]
  ProductId productIds[numProductIds]
  int32 parentTaskIndex
}

// inlined
ItemId {
  int32 itemId
  int32 itemCount
  int32 served
}

// inlined
ProductId {
  int32 productId
  int32 productCount
  int32 produced
}

MechaLab {
  int32 version = 0
  int32 numItemPoints
  KeyValuePair<int32, int32> itemPoints[numItemPoints]
}

MechaAppearance {
  int32 version = 1
  string overrideName // version >= 1, max length: 64
  string description // version >= 1, max length: 1024
  int32 thumbnailLength // version >= 1
  uint8 thumbnail[thumbnailLength] // version >= 1
  int32 numMainColors
  RGBA mainColors[numMainColors]
  RGBA partColors[numMainColors * 64]
  uint64 partHideMask
  uint64 partCustomMask
  MechaArmor armor
}

// inlined
RGBA {
  uint8 r
  uint8 g
  uint8 b
  uint8 a
}

MechaArmor {
  int32 version = 1
  int32 numBoneArmors // = 256
  ExportStruct<int32, BoneArmor> boneArmors[numBoneArmors - 1]
  int32 numMaterials // version >= 1
  MechaMaterial materials[numMaterials] // version >= 1
}

BoneArmor {
  uint8 version = 1
  uint8 xSize
  uint8 ySize
  uint8 zSize
  uint8 voxelSize
  uint8 hide
  Vector3 position
  Quaternion rotation
  Vector3 scale
  int32 voxelsLength
  uint8 voxels[voxelsLength]
  int32 numFilters
  VoxelFilterWithClassId filters[numFilters]
  int32 matIds[8] // version >= 1
  int32 checksum // 0x3e7ac000 + boneId
}

// inlined
VoxelFilterWithClassId {
  int32 classId
  VoxelFilter_Curve voxelFilterCurve if (classId == 1)
  VoxelFilter_Fan voxelFilterFan if (classId == 2)
  VoxelFilter_Extrude voxelFilterExtrude if (classId == 3)
}

VoxelFilter_Curve {
  uint8 version = 0
  uint8 axis
  uint8 size
  VoxelFilterStateAndPointSet statesAndPointSets[size + 1]
}

// inlined
VoxelFilterStateAndPointSet {
  int32 stateSet
  Vector2 pointSet
}

VoxelFilter_Fan {
  uint8 version = 0
  uint8 axis
  uint8 size
  uint8 length
  int32 angle
}

VoxelFilter_Extrude {
  uint8 version = 0
  uint8 axis
  uint8 size
  uint8 length
  VoxelFilterStateAndPointSet statesAndPointSets[size + 1]
}

MechaMaterial {
  int32 version = 0
  int32 protoId
  int32 numColors
  RGBA colors[numColors]
}

PlayerNavigation {
  int32 version = 2
  boolean navigating
  int32 naviAstroId
  VectorLF3 naviTarget
  int32 indicatorAstroId // version >= 1
  int32 indicatorEnemyId // version >= 2
  boolean useFly
  boolean useSail
  boolean useWarp
  int32 stage // ENaviStage (None = 0, Departure = 1, OriginOrbit = 2, AccOrbit = 3, Space = 4, DestOrbit = 5, Approaching = 6)
  float64 flyThreshold
  float64 sailThreshold
  float64 warpThreshold
  float64 maxSailSpeed
}

GalacticTransport {
  int32 version = 1
  int32 numStation2stationRoutes
  int64 station2stationRoutes[numStation2stationRoutes]
  int32 numAstro2astroRoutes
  KeyValuePair<int64, LogisticShipRoute> astro2astroRoutes[numAstro2astroRoutes]
  int32 numAstro2astroBans
  int64 astro2astroBans[numAstro2astroBans]
}

LogisticShipRoute {
  int32 version = 0
  boolean enable
  string comment
}

TrashSystem {
  int32 version = 0
  TrashContainer container
}

TrashContainer {
  int32 version = 0
  int32 trashCapacity
  int32 trashCursor
  int32 trashRecycleCursor
  TrashObject trashObjPool[trashCursor]
  TrashData trashDataPool[trashCursor]
  int32 trashRecycle[trashRecycleCursor]
}

TrashObject {
  uint8 version = 2
  int16 item
  uint8 count
  int16 inc // version >= 1
  Vector3 rPos // loads as int32, then convert to float32 and store to rPos
  Quaternion rRot
  int32 expire
}

TrashData {
  int32 version = 2
  int32 warningId // version >= 1
  int32 landPlanetId
  int32 nearPlanetId
  int32 nearStarId
  float64 nearStarGravity
  int32 life // version >= 2
  Vector3 lPos
  Quaternion lRot
  VectorLF3 uPos
  Quaternion uRot
  VectorLF3 uVel
  Vector3 uAgl
}

PlanetFactory {
  int32 version = 10
  int32 planetId
  int32 planetTheme
  int32 planetAlgoId
  int32 planetStyle
  PlanetData planet
  boolean landed
  HashSystem hashSystemDynamic // version >= 8
  HashSystem hashSystemStatic // version >= 8
  int32 entityCapacity
  int32 entityCursor
  int32 entityRecycleCursor
  EntityData entityPool[entityCursor - 1] // changed layout from version 9
  AnimData entityAnimPool[entityCursor] // changed layout from version 9
  SignData entitySignPool[entityCursor - 1] props (entityPool[i].id)
  EntityConnPool entityConn[entityCursor*16 - 16] props (entityPool[i//16].id)
  int32 entityRecycle[entityRecycleCursor]
  int32 prebuildCapacity
  int32 prebuildCursor
  int32 prebuildRecycleCursor
  PrebuildExportStruct prebuildPool[prebuildCursor - 1]
  int32 prebuildRecycle[prebuildRecycleCursor]
  int32 craftCapacity // version >= 9
  int32 craftCursor // version >= 9
  int32 craftRecycleCursor // version >= 9
  CraftData craftPool[craftCursor - 1] // version >= 9
  int32 craftRecycle[craftRecycleCursor] // version >= 9
  AnimData craftAnimPool[craftCursor - 1] // version >= 9
  int32 enemyCapacity // version >= 9
  int32 enemyCursor // version >= 9
  int32 enemyRecycleCursor // version >= 9
  EnemyData enemyPool[enemyCursor - 1] // version >= 9
  int32 enemyRecycle[enemyRecycleCursor] // version >= 9
  AnimData enemyAnimPool[enemyCursor - 1] // version >= 9
  int32 vegeCapacity
  int32 vegeCursor
  int32 vegeRecycleCursor
  VegeData vegePool[vegeCursor - 1]
  int32 vegeRecycle[vegeRecycleCursor]
  int32 veinCapacity
  int32 veinCursor
  int32 veinRecycleCursor
  VeinData veinPool[veinCursor - 1]
  int32 veinRecycle[veinRecycleCursor]
  AnimData veinAnimPool[veinCursor - 1]
  int32 ruinCapacity
  int32 ruinCursor
  int32 ruinRecycleCursor
  RuinPool ruinPool[ruinCursor - 1]
  int32 ruinRecycle[ruinRecycleCursor]
  CargoContainer cargoContainer
  CargoTraffic cargoTraffic
  FactoryStorage factoryStorage
  PowerSystem powerSystem
  FactorySystem factorySystem
  EnemyDFGroundSystem enemySystem
  CombatGroundSystem combatGroundSystem
  DefenseSystem defenseSystem
  PlanetATField planetATField
  ConstructionSystem constructionSystem
  PlanetTransport transport
  PlatformSystem platformSystem
  DigitalSystem digitalSystem
}

HashSystem {
  int32 numHashPool
  KeyValuePair<int32, int32> hashPoolRecycle[numHashPool] // first: hashPool, second: hashCycle
  BucketData_ExportStruct bucketData[363] props (i) // bucketCount = 362, dumped from asset "common/bucket map/bucket-map-6"
}

BucketData_ExportStruct {
  injected int32 i = 0
  int32 bucketOffset
  int32 bucketCursor if (i < 362)
  int32 bucketRecycleCursor if (i < 362)
}

RuinPool {
  uint8 version = 1
  int32 id
  int16 modelIndex if (id > 0)
  int32 lifeTime if (id > 0)
  Vector3 pos if (id > 0)
  Quaternion rot if (id > 0)
  int32 hashAddress if (id > 0) // version >= 1
}

PlanetData {
  int32 numModData
  uint8 modData[numModData]
  int32 numVeinAmounts
  int64 veinAmounts[numVeinAmounts]
  int32 numVeinGroups
  VeinGroup veinGroups[numVeinGroups]
}

VeinGroup {
  // EVeinType { None = 0, Iron = 1, Copper = 2, Silicium = 3, Titanium = 4, Stone = 5, Coal = 6, Oil = 7,
  //     Fireice = 8, Diamond = 9, Fractal = 10, Crysrub = 11, Grat = 12, Bamboo = 13, Mag = 14, Max = 15 }
  int32 type
  Vector3 pos
  int32 count
  int64 amount
}

EntityData {
  uint8 version = 11
  int32 id
  int16 protoId if (id > 0)
  int16 modelIndex if (id > 0)
  Vector3 pos if (id > 0)
  Quaternion rot if (id > 0)
  float32 tilt if (id > 0) // version >= 10
  uint8 stateFlags if (id > 0) // version >= 11
  uint32 hashBits if (id > 0) // version >= 7
  int32 hashAddress if (id > 0) // version >= 7
  int32 idSum if (id > 0) // sum of beltId, powerConId, ...
  cid beltId               if (id > 0)
  cid powerConId           if (id > 0 and beltId               != null and idSum > beltId.value)
  cid inserterId           if (id > 0 and powerConId           != null and idSum > beltId.value + powerConId.value)
  cid assemblerId          if (id > 0 and inserterId           != null and idSum > beltId.value + powerConId.value + inserterId.value)
  cid labId                if (id > 0 and assemblerId          != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value)
  cid powerNodeId          if (id > 0 and labId                != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value)
  cid powerGenId           if (id > 0 and powerNodeId          != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value)
  cid combatStatId         if (id > 0 and powerGenId           != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value)
  cid constructionStatId   if (id > 0 and combatStatId         != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value)
  cid fractionateId        if (id > 0 and constructionStatId   != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value)
  cid storageId            if (id > 0 and fractionateId        != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value)
  cid tankId               if (id > 0 and storageId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value)
  cid splitterId           if (id > 0 and tankId               != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value)
  cid ejectorId            if (id > 0 and splitterId           != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value)
  cid minerId              if (id > 0 and ejectorId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value)
  cid siloId               if (id > 0 and minerId              != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value)
  cid stationId            if (id > 0 and siloId               != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value)
  cid dispenserId          if (id > 0 and stationId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value)
  cid turretId             if (id > 0 and dispenserId          != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value)
  cid beaconId             if (id > 0 and turretId             != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value)
  cid fieldGenId           if (id > 0 and beaconId             != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value)
  cid battleBaseId         if (id > 0 and fieldGenId           != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value)
  cid constructionModuleId if (id > 0 and battleBaseId         != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value)
  cid combatModuleId       if (id > 0 and constructionModuleId != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value)
  cid powerAccId           if (id > 0 and combatModuleId       != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value)
  cid powerExcId           if (id > 0 and powerAccId           != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value)
  cid warningId            if (id > 0 and powerExcId           != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value)  // version >= 4
  cid monitorId            if (id > 0 and warningId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value + warningId.value)  // version >= 2
  cid speakerId            if (id > 0 and monitorId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value + warningId.value + monitorId.value)  // version >= 3
  cid spraycoaterId        if (id > 0 and speakerId            != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value + warningId.value + monitorId.value + speakerId.value)  // version >= 5
  cid pilerId              if (id > 0 and spraycoaterId        != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value + warningId.value + monitorId.value + speakerId.value + spraycoaterId.value)  // version >= 5
  cid extraInfoId          if (id > 0 and pilerId              != null and idSum > beltId.value + powerConId.value + inserterId.value + assemblerId.value + labId.value + powerNodeId.value + powerGenId.value + combatStatId.value + constructionStatId.value + fractionateId.value + storageId.value + tankId.value + splitterId.value + ejectorId.value + minerId.value + siloId.value + stationId.value + dispenserId.value + turretId.value + beaconId.value + fieldGenId.value + battleBaseId.value + constructionModuleId.value + combatModuleId.value + powerAccId.value + powerExcId.value + warningId.value + monitorId.value + speakerId.value + spraycoaterId.value + pilerId.value)  // version >= 7
  // seems stupid, but works
}

// inlined
cid {
  uint8 available
  int24 value if (available > 0) default (0)
}

AnimData {
  float32 time
  float32 prepareLength
  float32 workingLength
  uint32 state
  float32 power
}

SignData {
  injected int32 id = 0
  uint8 signType if (id != 0)
  uint8 iconType if (id != 0)
  uint16 iconId0 if (id != 0)
  float32 count0 if (id != 0 and iconType & 0x80 != 0)
  float32 x if (id != 0)
  float32 y if (id != 0)
  float32 z if (id != 0)
  float32 w if (id != 0)
}

// inlined
EntityConnPool {
  injected int32 id = 0
  uint8 available if (id != 0)
  int32 data if (id != 0 and available != 0)
}

// inlined
PrebuildExportStruct {
  PrebuildData prebuildData
  EntityConnPool prebuildConnPool[16] props (prebuildData.id) // if (prebuildData.id != 0)
}

PrebuildData {
  uint8 version = 6
  int32 id
  int16 protoId if (id != 0)
  int16 modelIndex if (id != 0)
  Vector3 pos if (id != 0)
  Quaternion rot if (id != 0)
  Vector3 pos2 if (id != 0)
  Quaternion rot2 if (id != 0)
  float32 tilt if (id != 0) // version >= 6
  uint32 hashBits if (id != 0) // version >= 4
  int32 hashAddress if (id != 0) // version >= 4
  boolean isDestroyed if (id != 0) // version >= 3
  int32 itemRequired if (id != 0)
  int32 builderModuleId if (id != 0) // version >= 5
  float32 builderValue if (id != 0) // version >= 5
  boolean builderLaunched if (id != 0) // version >= 5
  int16 pickOffset if (id != 0)
  int16 insertOffset if (id != 0)
  int32 recipeId if (id != 0)
  int32 filterId if (id != 0)
  int32 warningId if (id != 0)  // version >= 2
  int32 extraInfoId if (id != 0) // version >= 4
  boolean isWarningSetted if (id != 0) // version >= 4
  int32 paramCount if (id != 0)
  int32 parameters[paramCount] if (id != 0)
}

CraftData {
  uint8 version = 3
  int32 id
  int16 protoId if (id > 0)
  int16 modelIndex if (id > 0)
  int32 astroId if (id > 0)
  int32 owner if (id > 0)  // changed to int32 since version 1
  int16 port if (id > 0)
  uint8 prototype if (id > 0) // EProtoType
  boolean dynamic if (id > 0)
  boolean isSpace if (id > 0)
  uint8 stateFlags if (id > 0)
  VectorLF3 spacePos if (id > 0 and isSpace)
  Vector3 nonSpacePos if (id > 0 and not isSpace)
  Quaternion rot if (id > 0)
  Vector3 vel if (id > 0 and dynamic)
  uint32 hashBits if (id > 0)
  int32 hashAddress if (id > 0)
  int32 combatStatId if (id > 0)
  int32 droneId if (id > 0)
  int32 fleetId if (id > 0)
  FlexibleInt unitId if (id > 0)
  FlexibleInt cAnchorId if (id > 0) // version >= 2
  FlexibleInt vehicleId if (id > 0) // version >= 2
  FlexibleInt vPartId if (id > 0) // version >= 2
  FlexibleInt vdCockpitId if (id > 0) // version >= 2
  FlexibleInt vdGyroscopeId if (id > 0) // version >= 2
  FlexibleInt vdTyreId if (id > 0) // version >= 2
  FlexibleInt vdSuspensionId if (id > 0) // version >= 2
  FlexibleInt vdEngineId if (id > 0) // version >= 2
  FlexibleInt vdWarpId if (id > 0) // version >= 2
  FlexibleInt vdBatteryId if (id > 0) // version >= 2
  FlexibleInt vdStorageId if (id > 0) // version >= 2
  FlexibleInt vdFuelStorageId if (id > 0) // version >= 2
  FlexibleInt vdTankId if (id > 0) // version >= 2
  FlexibleInt vdConnectorId if (id > 0) // version >= 2
  FlexibleInt vwGaussId if (id > 0) // version >= 2
  FlexibleInt vwLaserId if (id > 0) // version >= 2
  FlexibleInt vwCannonId if (id > 0) // version >= 2
  FlexibleInt vwMissileId if (id > 0) // version >= 2
  FlexibleInt vwPlasmaId if (id > 0) // version >= 2
  FlexibleInt vwDisturbId if (id > 0) // version >= 2
  FlexibleInt vwThrowId if (id > 0) // version >= 2
  FlexibleInt vwShieldId if (id > 0) // version >= 2
  FlexibleInt rigidId if (id > 0) // version >= 3
  FlexibleInt ccrId if (id > 0) // version >= 3
}

EnemyData {
  uint8 version = 0
  int32 id
  int16 protoId if (id > 0)
  int16 modelIndex if (id > 0)
  int32 astroId if (id > 0)
  int32 originAstroId if (id > 0)
  int16 owner if (id > 0)
  int16 port if (id > 0)
  boolean dynamic if (id > 0)
  boolean isSpace if (id > 0)
  boolean localized if (id > 0)
  uint8 stateFlags if (id > 0)
  VectorLF3 spacePos if (id > 0 and isSpace)
  Vector3 nonSpacePos if (id > 0 and not isSpace)
  Quaternion rot if (id > 0)
  Vector3 vel if (id > 0 and dynamic)
  uint32 hashBits if (id > 0)
  int32 hashAddress if (id > 0)
  int32 combatStatId if (id > 0)
  uint16 builderId if (id > 0)
  uint16 dfGBaseId if (id > 0 and not isSpace and not dynamic)
  uint16 dfGConnectorId if (id > 0 and not isSpace and not dynamic)
  uint16 dfGReplicatorId if (id > 0 and not isSpace and not dynamic)
  uint16 dfGTurretId if (id > 0 and not isSpace and not dynamic)
  uint16 dfGShieldId if (id > 0 and not isSpace and not dynamic)
  uint16 dfSNodeId if (id > 0 and isSpace and not dynamic)
  uint16 dfSCoreId if (id > 0 and isSpace and not dynamic)
  uint16 dfSConnectorId if (id > 0 and isSpace and not dynamic)
  uint16 dfSReplicatorId if (id > 0 and isSpace and not dynamic)
  uint16 dfSGammaId if (id > 0 and isSpace and not dynamic)
  uint16 dfSTurretId if (id > 0 and isSpace and not dynamic)
  uint16 dfTinderId if (id > 0 and isSpace and dynamic)
  uint16 dfRelayId if (id > 0 and isSpace and dynamic)
  FlexibleInt unitId if (id > 0)
}

VegeData {
  uint8 version = 1
  int32 id
  int16 protoId
  int16 modelIndex
  uint32 hashBits // version >= 1
  int32 hashAddress // version >= 1
  int32 combatStatId // version >= 1
  Vector3 pos
  Quaternion rot
  Vector3 scl
}

VeinData {
  uint8 version = 1
  int32 id
  int16 type  // write as int16, but cast into uint8 during import
  int16 modelIndex
  int16 groupIndex
  int32 amount
  int32 productId
  Vector3 pos
  int32 combatStatId // version >= 1
  int32 minerCount
  int32 minerId0
  int32 minerId1
  int32 minerId2
  int32 minerId3
  int32 hashAddress // version >= 1
}

CargoContainer {
  int32 version = 2
  int32 poolCapacity
  int32 cursor
  int32 recycleBegin
  int32 recycleEnd
  Cargo cargoPool[cursor]
  int32 recycleIds[poolCapacity]
}

// inlined
Cargo {
  int16 item
  uint8 stack  // version >= 2
  uint8 inc // version >= 2
}

CargoTraffic {
  int32 version = 4
  int32 beltCursor
  int32 beltCapacity
  int32 beltRecycleCursor
  int32 splitterCursor
  int32 splitterCapacity
  int32 splitterRecycleCursor
  int32 pathCursor
  int32 pathCapacity
  int32 pathRecycleCursor
  BeltComponent beltPool[beltCursor - 1]
  int32 beltRecycle[beltRecycleCursor]
  SplitterComponent splitterPool[splitterCursor - 1]
  int32 splitterRecycle[splitterRecycleCursor]
  CargoPathExportStruct pathPool[pathCursor - 1]
  int32 pathRecycle[pathRecycleCursor]
  int32 monitorCursor
  int32 monitorCapacity
  int32 monitorRecycleCursor
  MonitorComponent monitorPool[monitorCursor - 1]
  int32 monitorRecycle[monitorRecycleCursor]
  int32 spraycoaterCursor
  int32 spraycoaterCapacity
  int32 spraycoaterRecycleCursor
  SpraycoaterComponent spraycoaterPool[spraycoaterCursor - 1]
  int32 spraycoaterRecycle[spraycoaterRecycleCursor]
  int32 pilerCursor
  int32 pilerCapacity
  int32 pilerRecycleCursor
  PilerComponent pilerPool[pilerCursor - 1]
  int32 pilerRecycle[pilerRecycleCursor]
}

BeltComponent {
  // uint8 version = 1
  int32 id
  int32 entityId
  int32 speed
  int32 segPathId
  int32 segIndex
  int32 segPivotOffset
  int32 segLength
  int32 outputId
  int32 backInputId
  int32 leftInputId
  int32 rightInputId
}

SplitterComponent {
  int32 version = 2
  int32 id
  int32 entityId
  int32 beltA
  int32 beltB
  int32 beltC
  int32 beltD
  int32 input0
  int32 input1
  int32 input2
  int32 input3
  int32 output0
  int32 output1
  int32 output2
  int32 output3
  boolean inPriority
  boolean outPriority
  int32 outFilter
  uint8 prioritySlotPresets  // version >= 1
  int16 outFilterPreset  // version >= 1
  uint8 prioritySlotPresets  // version >= 2
  int16 outFilterPreset  // version >= 2
  int32 topId  // version >= 2
  int32 bottomId  // version >= 2
}

// inlined
CargoPathExportStruct {
  int32 available
  CargoPath path if (available != 0)
}

MonitorComponent {
  int32 version = 2
  int32 id
  int32 entityId
  int32 pcId
  int32 speakerId
  int32 targetBeltId
  int8 offset
  int32 targetCargoBytes  // int32 since version 1, uint16 in version 0
  uint16 periodTickCount
  uint16 prewarmSampleTick
  FlexibleInt lastCargoId
  FlexibleInt formerCargoId
  FlexibleInt lastCargoOffset
  uint8 lastCargoStack  // version >= 1
  int8 cargoBytesArray[periodTickCount]
  FlexibleInt periodCargoBytesArray[periodTickCount]
  FlexibleInt totalCargoBytes
  uint8 passColorId
  uint8 failColorId
  uint8 alarmMode
  int32 cargoFilter
  uint8 passOperator
  FlexibleInt systemWarningMode
  FlexibleInt systemWarningSignalId
  uint8 spawnItemOperator // version >= 2
  float32 spawnItemAccumulator // version >= 2
}

CargoPath {
  int32 version = 1
  int32 id
  int32 capacity
  int32 bufferLength
  int32 chunkCapacity
  int32 chunkCount
  int32 updateLen
  boolean closed
  int32 outputPathId
  int32 outputIndex
  int32 numBelts
  int32 numInputPaths
  uint8 buffer[bufferLength]
  int32 chunks[chunkCount * 3]
  Vector3 pointPos[bufferLength]
  Quaternion pointRot[bufferLength]
  int32 belts[numBelts]
  int32 inputPaths[numInputPaths]
}

SpraycoaterComponent {
  int32 version = 2
  int32 id
  int32 entityId
  int32 pcId
  FlexibleInt cargoBeltId
  FlexibleInt incBeltId
  FlexibleInt incItemId
  FlexibleInt incAbility
  FlexibleInt incSprayTimes
  FlexibleInt incCount
  FlexibleInt extraIncCount  // version >= 1
  FlexibleInt incCapacity
  boolean incUsed // version >= 2
  FlexibleInt sprayTime
}

PilerComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 pcId
  uint8 pilerState // PilerState { None, Pile, Split }
  FlexibleInt inputBeltId
  FlexibleInt outputBeltId
  int16 cacheItemId1
  uint8 cacheCargoStack1
  uint8 cacheCargoInc1
  int16 cacheItemId2  // version >= 1
  uint8 cacheCargoStack2 // version >= 1
  uint8 cacheCargoInc2 // version >= 1
  uint8 cacheCdTick
  int32 timeSpend
}

FactoryStorage {
  int32 version = 0
  int32 storageCursor
  int32 storageCapacity
  int32 storageRecycleCursor
  StorageExportStruct storagePool[storageCursor - 1]
  int32 storageRecycle[storageRecycleCursor]
  int32 tankCapacity
  int32 tankCursor
  int32 tankRecycleCursor
  TaskComponent tankPool[tankCursor - 1]
  int32 tankRecycle[tankRecycleCursor]
}

// inlined
StorageExportStruct {
  int32 available
  int32 storagePoolSize if (available != 0)
  StorageComponent storage if (available != 0)
}

TaskComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 lastTankId
  int32 nextTalkId
  int32 belt0
  int32 belt1
  int32 belt2
  int32 belt3
  boolean isOutput0
  boolean isOutput1
  boolean isOutput2
  boolean isOutput3
  int32 fluidCapacity
  int32 fluidCount
  int32 fluidInc  // version >= 1
  int32 fluidId
  boolean outputSwitch
  boolean inputSwitch
  boolean isBottom
}

PowerSystem {
  int32 version = 0
  int32 genCapacity
  int32 genCursor
  int32 genRecycleCursor
  PowerGeneratorComponent genPool[genCursor - 1]
  int32 genRecycle[genRecycleCursor]
  int32 nodeCapacity
  int32 nodeCursor
  int32 nodeRecycleCursor
  PowerNodeComponent nodePool[nodeCursor - 1]
  int32 nodeRecycle[nodeRecycleCursor]
  int32 consumerCapacity
  int32 consumerCursor
  int32 consumerRecycleCursor
  PowerConsumerComponent consumerPool[consumerCursor - 1]
  int32 consumerRecycle[consumerRecycleCursor]
  int32 accCapacity
  int32 accCursor
  int32 accRecycleCursor
  PowerAccumulatorComponent accPool[accCursor - 1]
  int32 accRecycle[accRecycleCursor]
  int32 excCapacity
  int32 excCursor
  int32 excRecycleCursor
  PowerExchangerComponent excPool[excCursor - 1]
  int32 excRecycle[excRecycleCursor]
  int32 netCapacity
  int32 netCursor
  int32 netRecycleCursor
  ExportStruct<int32, PowerNetwork> netPool[netCursor]
  int32 netRecycle[netRecycleCursor]
}

PowerGeneratorComponent {
  int32 version = 7
  int32 id
  int32 entityId
  uint8 subId  // version >= 1
  int32 networkId
  int32 baseRuinId // version >= 6
  boolean photovoltaic
  boolean wind
  boolean gamma
  boolean geothermal  // version >= 3
  int64 genEnergyPerTick
  int64 useFuelPerTick
  int16 fuelMask
  int64 fuelEnergy
  int16 curFuelId
  int16 fuelId
  int16 fuelCount
  int16 fuelInc  // version >= 2
  boolean productive  // version >= 2
  boolean incUsed // version >= 7
  uint8 fuelIncLevel  // version >= 2
  int64 fuelHeat
  int32 catalystId
  int32 catalystPoint
  int32 catalystIncPoint  // version >= 2
  int32 productId
  float32 productCount
  int64 productHeat
  float32 warpup
  float32 ionEnhance
  float32 gthStrength // version >= 3
  float32 gthAffectStrength // version >= 5
  float32 x
  float32 y
  float32 z
  boolean boost // version >= 4
}

PowerNodeComponent {
  int32 version = 0
  int32 id
  int32 entityId
  int32 networkId
  boolean isCharger
  int32 workEnergyPerTick
  int32 idleEnergyPerTick
  int32 requiredEnergy
  Vector3 powerPoint
  float32 connectDistance
  float32 coverRadius
}

PowerConsumerComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 networkId
  Vector3 plugPos
  float32 plugAlt // version >= 1
  int64 requiredEnergy
  int64 servedEnergy
  int64 workEnergyPerTick
  int64 idleEnergyPerTick
}

PowerAccumulatorComponent {
  int32 version = 1
  int32 id
  int32 entityId
  uint8 subId  // version >= 1
  int32 networkId
  int64 inputEnergyPerTick
  int64 outputEnergyPerTick
  int64 curEnergy
  int64 maxEnergy
}

PowerExchangerComponent {
  int32 version = 4
  int32 id
  int32 entityId
  uint8 subId  // version >= 2
  int32 networkId
  int16 emptyCount
  int16 fullCount
  int16 emptyInc // version >= 3
  int16 fullInc // version >= 3
  float32 targetState
  float32 state
  int64 energyPerTick
  int64 currPoolEnergy
  int64 maxPoolEnergy
  uint8 poolInc // version >= 4
  int32 emptyId
  int32 fullId
  int32 belt0  // version >= 1
  int32 belt1  // version >= 1
  int32 belt2  // version >= 1
  int32 belt3  // version >= 1
  boolean isOutput0  // version >= 1
  boolean isOutput1  // version >= 1
  boolean isOutput2  // version >= 1
  boolean isOutput3  // version >= 1
  int32 outputSlot  // version >= 1
  int32 inputSlot  // version >= 1
  int32 outputRectify  // version >= 1
  int32 inputRectify  // version >= 1
}

PowerNetwork {
  int32 version = 1
  int32 id
  float64 consumerRatio // version >= 1
  float64 generatorRatio // version >= 1
  int32 numNodes
  int32 numConsumers
  int32 numGenerator
  int32 numAccumulator
  int32 numExchanger
  PowerNetworkStructures nodes[numNodes]
  int32 consumers[numConsumers]
  int32 generators[numGenerator]
  int32 accumulators[numAccumulator]
  int32 exchangers[numExchanger]
}

PowerNetworkStructures {
  int32 version = 0
  int32 id
  float32 x
  float32 y
  float32 z
  float32 connDistance2
  float32 coverRadius2
  int32 genId
  int32 accId
  int32 excId
  int32 numConns
  int32 numLines
  int32 numConsumers
  int32 conns[numConns]
  int32 lines[numLines]
  int32 consumers[numConsumers]
}

FactorySystem {
  int32 version = 0
  int32 minerCapacity
  int32 minerCursor
  int32 minerRecycleCursor
  MinerComponent minerPool[minerCursor - 1]
  int32 minerRecycle[minerRecycleCursor]
  int32 inserterCapacity
  int32 inserterCursor
  int32 inserterRecycleCursor
  InserterComponent inserterPool[inserterCursor - 1]
  int32 inserterRecycle[inserterRecycleCursor]
  int32 assemblerCapacity
  int32 assemblerCursor
  int32 assemblerRecycleCursor
  AssemblerComponent assemblerPool[assemblerCursor - 1]
  int32 assemblerRecycle[assemblerRecycleCursor]
  int32 fractionateCapacity
  int32 fractionateCursor
  int32 fractionateRecycleCursor
  FractionatorComponent fractionatePool[fractionateCursor - 1]
  int32 fractionateRecycle[fractionateRecycleCursor]
  int32 ejectorCapacity
  int32 ejectorCursor
  int32 ejectorRecycleCursor
  EjectorComponent ejectorPool[ejectorCursor - 1]
  int32 ejectorRecycle[ejectorRecycleCursor]
  int32 siloCapacity
  int32 siloCursor
  int32 siloRecycleCursor
  SiloComponent siloPool[siloCursor - 1]
  int32 siloRecycle[siloRecycleCursor]
  int32 labCapacity
  int32 labCursor
  int32 labRecycleCursor
  LabComponent labPool[labCursor - 1]
  int32 labRecycle[labRecycleCursor]
}

MinerComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 pcId
  int32 type  // EMinerType { None, Water, Vein, Oil }
  int32 speed
  int32 speedDamper // version >= 1
  int32 time
  int32 period
  int32 insertTarget
  int32 workState  // EWorkState { Full=-2, Lack=-1, Idle=0, Running=1, Outputing=2 }
  int32 numVeins
  int32 veins[numVeins]
  int32 currentVeinIndex
  int32 minimumVeinAmount
  int32 productId
  int32 productCount
  uint32 seed
}

InserterComponent {
  int32 version = 3
  int32 id
  int32 entityId
  int32 pcId
  uint8 stage  // EInserterStage { Picking, Sending, Inserting, Returning }, int32 for version 0
  uint8 speed  // divided by 10000 and convert to uint8, int32 for version 0 (no need to divide)
  int32 time
  int32 stt
  int32 delay
  int32 pickTarget
  int32 insertTarget
  boolean careNeeds
  boolean canStack
  uint8 grade // version >= 3
  uint8 stackInput // version >= 3
  uint8 stackOutput // version >= 3
  boolean bidirectional // version >= 3
  int16 pickOffset
  int16 insertOffset
  int16 filter  // int32 for version 0
  int16 itemId  // int32 for version 0
  uint8 stackCount  // int32 for version 0
  Vector3 pos2
  Quaternion rot2
  uint8 t1  // int16 for version 0
  uint8 t2  // int16 for version 0
  int16 itemCount  // version >= 2
  int16 itemInc  // version >= 2
}

AssemblerComponent {
  int32 version = 4
  int32 id
  int32 entityId
  int32 pcId
  boolean replicating
  boolean reserved = 0  // always false
  int32 speed
  int32 time
  int32 speedOverride  // version >= 2
  int32 extraTime  // version >= 2
  int32 extraSpeed  // version >= 2
  int32 extraPowerRatio  // version >= 2
  boolean productive  // version >= 2
  boolean forceAccMode  // version >= 3
  boolean incUsed // version >= 4
  int16 recipeId  // int32 for version 0
  uint8 recipeType if (recipeId > 0)
  int32 timeSpend if (recipeId > 0)
  int32 extraTimeSpend if (recipeId > 0)  // version >= 2
  uint8 numRequires if (recipeId > 0)
  int16 requires[numRequires] if (recipeId > 0)
  uint8 numRequireCounts if (recipeId > 0)
  int16 requireCounts[numRequireCounts] if (recipeId > 0)
  uint8 numServed if (recipeId > 0)
  int32 served[numServed] if (recipeId > 0)
  uint8 numIncServed if (recipeId > 0)  // version >= 2
  int32 incServed[numIncServed] if (recipeId > 0)  // version >= 2
  uint8 numNeeds if (recipeId > 0)
  int16 needs[numNeeds] if (recipeId > 0)
  uint8 numProducts if (recipeId > 0)
  int16 products[numProducts] if (recipeId > 0)
  uint8 numProductCounts if (recipeId > 0)
  int16 productCounts[numProductCounts] if (recipeId > 0)
  uint8 numProduced if (recipeId > 0)
  int32 produced[numProduced] if (recipeId > 0)
}

FractionatorComponent {
  int32 version = 4
  int32 id
  int32 entityId
  int32 pcId
  int32 belt0
  int32 belt1
  int32 belt2
  boolean isOutput0
  boolean isOutput1
  boolean isOutput2
  boolean isWorking
  float32 produceProb
  int32 fluidId
  int32 productId
  int32 fluidInputCount
  int32 fluidInputInc  // version >= 2
  float32 fluidInputCargoCount  // version >= 2, int32 for version 2
  int32 productOutputCount
  int32 fluidOutputCount
  int32 fluidOutputInc  // version >= 2
  int32 ignored  // version >= 2, equals to fluidOutputCount
  int32 progress
  boolean reserved = 0  // always false
  boolean fractionateSuccess
  boolean incUsed // version >= 4
  int32 fluidInputMax
  int32 productOutputMax
  int32 fluidOutputMax
  int32 fluidOutputTotal  // version >= 1
  int32 productOutputTotal  // version >= 1
  uint32 seed
}

EjectorComponent {
  int32 version = 3
  int32 id
  int32 entityId
  int32 planetId
  int32 pcId
  int32 direction
  int32 time
  boolean fired
  int32 chargeSpend
  int32 coldSpend
  int32 bulletId
  int32 bulletCount
  int32 bulletInc  // version >= 1
  int32 orbitId
  float32 pivotY
  float32 muzzleY
  boolean boost // version >= 2
  boolean incUsed // version >= 3
  Vector3 localPosN
  float32 localAlt
  Quaternion localRot
  Vector3 localDir
}

SiloComponent {
  int32 version = 3
  int32 id
  int32 entityId
  int32 planetId
  int32 pcId
  int32 direction
  int32 time
  boolean fired
  int32 chargeSpend
  int32 coldSpend
  int32 bulletId
  int32 bulletCount
  int32 bulletInc  // version >= 1
  int32 autoIndex
  boolean hasNode
  boolean boost // version >= 2
  boolean incUsed // version >= 3
  Vector3 localPos
  Quaternion localRot
}

LabComponent {
  int32 version = 3
  int32 id
  int32 entityId
  int32 pcId
  int32 nextLabId
  boolean replicating
  boolean reserved = 0  // always false
  int32 time
  int32 hashBytes
  int32 extraHashBytes  // version >= 1
  int32 extraTime  // version >= 1
  int32 extraSpeed  // version >= 1
  int32 extraPowerRatio  // version >= 1
  boolean productive  // version >= 1
  boolean forceAccMode  // version >= 2
  boolean incUsed // version >= 3
  int32 speed  // version >= 2
  int32 speedOverride  // version >= 2
  boolean researchMode
  int32 recipeId
  int32 techId
  // matrix mode
  int32 timeSpend if (not researchMode and recipeId > 0)
  int32 extraTimeSpend if (not researchMode and recipeId > 0)  // version >= 1
  int32 numRequires if (not researchMode and recipeId > 0)
  int32 requires[numRequires] if (not researchMode and recipeId > 0)
  int32 numRequireCounts if (not researchMode and recipeId > 0)
  int32 requireCounts[numRequireCounts] if (not researchMode and recipeId > 0)
  int32 numServed if (not researchMode and recipeId > 0)
  int32 served[numServed] if (not researchMode and recipeId > 0)
  int32 numIncServed if (not researchMode and recipeId > 0)  // version >= 1
  int32 incServed[numIncServed] if (not researchMode and recipeId > 0)  // version >= 1
  int32 numNeeds if (not researchMode and recipeId > 0)
  int32 needs[numNeeds] if (not researchMode and recipeId > 0)
  int32 numProducts if (not researchMode and recipeId > 0)
  int32 products[numProducts] if (not researchMode and recipeId > 0)
  int32 numProductCounts if (not researchMode and recipeId > 0)
  int32 productCounts[numProductCounts] if (not researchMode and recipeId > 0)
  int32 numProduced if (not researchMode and recipeId > 0)
  int32 produced[numProduced] if (not researchMode and recipeId > 0)
  // research mode
  int32 numMatrixPoints if (researchMode)
  int32 matrixPoints[numMatrixPoints] if (researchMode)
  int32 numMatrixServed if (researchMode)
  int32 matrixServed[numMatrixServed] if (researchMode)
  int32 numMatrixNeeds if (researchMode)
  int32 matrixNeeds[numMatrixNeeds] if (researchMode)
  int32 numMatrixIncServed if (researchMode)  // version >= 1
  int32 matrixIncServed[numMatrixIncServed] if (researchMode)  // version >= 1
}

PlanetTransport {
  int32 version = 1
  int32 stationCursor
  int32 stationCapacity
  int32 stationRecycleCursor
  ExportStruct<int32, StationComponent> stationPool[stationCursor - 1]
  int32 stationRecycle[stationRecycleCursor]
  int32 dispenserCapacity // version >= 1
  int32 dispenserCursor // version >= 1
  int32 dispenserRecycleCursor // version >= 1
  ExportStruct<int32, DispenserComponent> dispenserPool[dispenserCursor - 1] // version >= 1
  int32 dispenserRecycle[dispenserRecycleCursor] // version >= 1
}

DispenserComponent {
  int32 version = 0
  int32 id // same as DispenserExportStruct.id
  int32 entityId
  int32 pcId
  int32 storageId
  int32 gene
  int64 energy
  int64 energyPerTick
  int64 energyMax
  int32 playerMode // EPlayerDeliveryMode { None, Recycle, Both, Supply }
  int32 storageMode // EStorageDeliveryMode { None, Supply, Demand }
  int32 filter
  int32 idleCourierCount
  int32 workCourierCount
  boolean courierAutoReplenish
  int32 workCourierDataCount
  CourierData workCourierDatas[workCourierCount] // allocated an array of length "workCourierDataCount", but only contains "workCourierCount" elements
  DeliveryLogisticOrder orders[workCourierCount]
  int32 holdupItemCount
  int32 holdupPackageLength
  DispenserStore holdupPackage[holdupItemCount]
  int32 playerOrdered
  int32 storageOrdered
  int32 pairProcess
  int32 pulseSignal // clip to [0, 3]
}

CourierData {
  int32 version = 0
  Vector3 begin
  Vector3 end
  int32 endId
  float32 direction
  float32 maxt
  float32 t
  int32 itemId
  int32 itemCount
  int32 inc
  int32 gene
}

DeliveryLogisticOrder {
  int32 version = 0
  int32 itemId
  int32 otherId
  int32 thisOrdered
  int32 otherOrdered
}

DispenserStore {
  int32 version = 0
  int32 itemId
  int32 count
  int32 inc
}

StationComponent {
  int32 version = 7
  int32 id
  int32 gid
  int32 entityId
  int32 planetId
  int32 pcId
  int32 minerId  // version >= 3
  int32 gene
  Vector3 droneDock
  Vector3 shipDockPos
  Quaternion shipDockRot
  boolean isStellar
  int64 energy
  int64 energyPerTick
  int64 energyMax
  int32 warperCount
  int32 warperMaxCount
  int32 idleDroneCount
  int32 workDroneCount
  int32 numWorkDroneDatas
  DroneData workDroneDatas[workDroneCount]
  LocalLogisticOrder workDroneOrders[workDroneCount]
  int32 idleShipCount
  int32 workShipCount
  uint64 idleShipIndices
  uint64 workShipIndices
  int32 numWorkShipDatas
  ShipData workShipDatas[workShipCount]
  RemoteLogisticOrder workShipOrders[workShipCount]
  int32 numStorage
  StationStore storage[numStorage]
  int32 numPriorityLocks // version >= 7
  StationPriorityLock priorityLocks[numPriorityLocks] // version >= 7
  int32 numSlots  // version >= 1
  SlotData slots[numSlots]  // version >= 1
  int32 localPairProcess
  int32 numRemotePairProcess // version >= 7
  int32 remotePairProcess[numRemotePairProcess] // version >= 7
  int32 nextShipIndex
  boolean isCollector
  boolean isVeinCollector  // version >= 3
  int32 numCollectionIds
  int32 collectionIds[numCollectionIds]
  int32 numCollectionPerTick
  float32 collectionPerTick[numCollectionPerTick]
  int32 numCurrentCollections
  float32 currentCollections[numCurrentCollections]
  int32 collectSpeed
  float64 tripRangeDrones  // version >= 2
  float64 tripRangeShips  // version >= 2
  boolean includeOrbitCollector  // version >= 2
  float64 warpEnableDist  // version >= 2
  boolean warperNecessary  // version >= 2
  int32 deliveryDrone  // version >= 2
  int32 deliveryShips  // version >= 2
  int32 pilerCount  // version >= 4
  boolean droneAutoReplenish // version >= 5
  boolean shipAutoReplenish // version >= 5
  int64 remoteGroupMask // version >= 7
  int32 routePriority // version >= 7 ERemoteRoutePriority { Ignore = 1, Prioritize = 2, Only = 3 }
}

StationPriorityLock {
  int32 version = 0
  uint8 priorityIndex
  uint8 lockTick
}

// inlined
SlotData {
  int32 dir
  int32 beltId
  int32 storageIdx
  int32 counter
}

DroneData {
  int32 version = 1
  Vector3 begin
  Vector3 end
  int32 endId
  float32 direction
  float32 maxt
  float32 t
  int32 itemId
  int32 itemCount
  int32 inc  // version >= 1
  int32 gene
}

LocalLogisticOrder {
  int32 version = 0
  int32 otherStationId
  int32 thisIndex
  int32 otherIndex
  int32 itemId
  int32 thisOrdered
  int32 otherOrdered
}

ShipData {
  int32 version = 1
  int32 stage
  int32 planetA
  int32 planetB
  VectorLF3 uPos
  Vector3 uVel
  float32 uSpeed
  float32 warpState
  Quaternion uRot
  Vector3 uAngularVel
  float32 uAngularSpeed
  VectorLF3 pPosTemp
  Quaternion pRotTemp
  int32 otherGId
  int32 direction
  float32 t
  int32 itemId
  int32 itemCount
  int32 inc  // version >= 1
  int32 gene
  int32 shipIndex
  int32 warperCnt
}

// same as LocalLogisticOrder as for now
RemoteLogisticOrder {
  int32 version = 0
  int32 otherStationId
  int32 thisIndex
  int32 otherIndex
  int32 itemId
  int32 thisOrdered
  int32 otherOrdered
}

StationStore {
  int32 version = 2
  int32 itemId
  int32 count
  int32 inc
  int32 localOrder
  int32 remoteOrder
  int32 maxWithKeepMode // version >= 2, keepMode = value / 1e8, max = value % 1e8
  float32 keepIncRatio
  int32 localLogic  // ELogisticStorage { None, Supply, Demand }
  int32 remoteLogic
}

PlatformSystem {
  int32 version = 1
  int32 numReformData
  uint8 reformData[numReformData]
  int32 latitudeCount  // + 1
  int32 reformOffsets[latitudeCount]
  int32 numReformCustomColors
  RGBAF reformCustomColors[numReformCustomColors]  // version >= 1
}

RGBAF {
  float32 r
  float32 g
  float32 b
  float32 a
}

DigitalSystem {
  int32 version = 1
  int32 speakerCapacity
  int32 speakerCursor
  int32 speakerRecycleCursor
  SpeakerComponent speakerPool[speakerCursor - 1]
  int32 speakerRecycle[speakerRecycleCursor]
  ObjectPool<ExtraInfoComponent> extraInfoes // version >= 1
}

SpeakerComponent {
  int32 version = 1
  int32 id
  int32 entityId
  uint8 tone
  uint8 volume
  uint8 pitch
  boolean playing
  int32 audioId
  int32 oneShotAudioId
  float32 time
  float32 length
  float32 speed
  boolean isInstrument
  boolean repeat
  int32 repeatTimes
  float32 volumeFade
  float32 fadeTarget
  float32 fadeInDuration
  float32 fadeOutDuration
  float32 falloffRadius0  // version >= 1
  float32 falloffRadius1  // version >= 1
}

ExtraInfoComponent {
  int32 version = 0
  int32 id
  uint8 objectType // EObjectType
  int32 objectId
  int32 infoLen
  string info if (infoLen > 0)
}

DysonSphere {
  int32 version = 3
  int32 randSeed
  DysonSwarm swarm
  int32 reserved = 1212  // constant
  int32 layerCount
  int32 numLayersIdBased
  ExportStruct<int32, DysonSphereLayer> layersIdBased[numLayersIdBased - 1]
  int32 rocketCapacity
  int32 rocketCursor
  int32 rocketRecycleCursor
  DysonRocket rocketPool[rocketCursor - 1]
  int32 rocketRecycle[rocketRecycleCursor]
  int32 autoNodeCount
  int32 numAutoNodes
  DysonAutoNode autoNodes[numAutoNodes]
  int32 nrdCapacity // version >= 2
  int32 nrdCursor // version >= 2
  int32 nrdRecycleCursor // version >= 2
  DysonNodeRData nrdPool[nrdCursor - 1] // version >= 2
  int32 nrdRecycle[nrdRecycleCursor] // version >= 2
  int32 inEditorRenderMaskL // version >= 3
  int32 inEditorRenderMaskS // version >= 3
  int32 inGameRenderMaskL // version >= 3
  int32 inGameRenderMaskS // version >= 3
}

// inlined
DysonAutoNode {
  int32 available
  int32 layerId if (available != 0)
  int32 id if (available != 0)
}

DysonSwarm {
  int32 version = 8
  int32 randSeed
  int32 sailCapacity
  int32 sailCursor
  int32 sailRecycleCursor
  DysonSail sailPoolForSave[sailCursor]
  DysonSailInfo_ExportStruct sailInfos[sailCursor] props (sailPoolForSave[i].st)
  int32 sailRecycle[sailRecycleCursor]
  int32 orbitCapacity
  int32 orbitCursor
  SailOrbit orbits[orbitCursor - 1]
  int32 numExpiryOrder = sailCapacity
  int32 expiryCursor
  int32 expiryEnding
  ExpiryOrder expiryOrder[numExpiryOrder]
  boolean eternal // version >= 7
  int32 numAbsorbOrder = sailCapacity // version >= 2
  int32 absorbCursor // version >= 2
  int32 absorbEnding // version >= 2
  AbsorbOrder absorbOrder[numAbsorbOrder] // version >= 2
  int32 numOrbitColors // version >= 6
  Quaternion orbitColorsHSVA[numOrbitColors] // version >= 6, xyzw -> hsva
  int32 bulletCapacity
  int32 bulletCursor
  int32 bulletRecycleCursor
  SailBullet bulletPool[bulletCursor - 1]
  int32 bulletRecycle[bulletRecycleCursor]
}

DysonSail {
  float32 st
  float32 px
  float32 py
  float32 pz
  float32 vx
  float32 vy
  float32 vz
  float32 gs
}

// inlined
DysonSailInfo_ExportStruct {
  injected float32 st = 0
  DysonSailInfo data if (st >= 0.001)
}

DysonSailInfo {
  uint32 orbit
  uint32 node
  uint32 kill
  Vector3 posr
}

// inlined
ExpiryOrder {
  int64 time
  int32 index
}

AbsorbOrder {
  int32 index
  int32 layer
  int32 node
  int64 time
  uint8 padding[4] // do not use: sizeof(AbsorbOrder) returns 24 (multiple of 8) while it only contains 20 bytes of data
}

SailOrbit {
  int32 version = 0
  int32 id
  float32 radius
  Quaternion rotation
  Vector3 up
  int32 count
  boolean enabled
}

SailBullet {
  int32 version = 0
  int32 id
  float32 t
  float32 maxt
  int32 state
  Vector3 rBegin
  Vector3 rEnd
  Vector3 lBegin
  Vector3 uEndVel
  VectorLF3 uBegin
  VectorLF3 uEnd
}

DysonSphereLayer {
  int32 version = 2
  int32 id
  float32 orbitRadius
  Quaternion orbitRotation
  Quaternion targetOrbitRotation  // version >= 1
  float32 orbitAngularSpeed
  float32 currentAngle
  Quaternion currentRotation
  Quaternion nextRotation
  int32 drawingGridMode  // renamed from gridMode in version 2
  int32 paintingGridMode  // version >= 2
  Color_ExportStruct colors  // version >= 2
  int32 nodeCapacity
  int32 nodeCursor
  int32 nodeRecycleCursor
  ExportStruct<int32, DysonNode> nodePool[nodeCursor - 1]
  int32 nodeRecycle[nodeRecycleCursor]
  int32 frameCapacity
  int32 frameCursor
  int32 frameRecycleCursor
  ExportStruct<int32, DysonFrame> framePool[frameCursor - 1]
  int32 frameRecycle[frameRecycleCursor]
  int32 shellCapacity
  int32 shellCursor
  int32 shellRecycleCursor
  ExportStruct<int32, DysonShell> shellPool[shellCursor - 1]
  int32 shellRecycle[shellRecycleCursor]
}

// inlined
Color_ExportStruct {
  boolean available
  int32 numCellColors if (available)
  RGBA cellColors[numCellColors] if (available)
}

DysonNode {
  int32 version = 5
  int32 id
  int32 protoId
  int32 layerId
  boolean use
  boolean reserved
  Vector3 pos
  int32 sp
  int32 spMax
  int32 spOrdered
  int32 cpOrdered  // version >= 3
  int32 rid  // version >= 2
  int32 frameTurn
  int32 shellTurn  // version >= 1
  int32 spReq
  int32 cpReq  // version >= 4
  RGBA color  // version >= 5
}

DysonFrame {
  int32 version = 1
  int32 id
  int32 protoId
  int32 layerId
  boolean reserved
  int32 nodeAId
  int32 nodeBId
  boolean euler
  int32 spA
  int32 spB
  int32 spMax
  RGBA color  // version >= 1
}

DysonShell {
  int32 version = 4
  int32 id
  int32 protoId
  int32 layerId
  int32 randSeed
  RGBA color  // version >= 3
  int32 numNodes
  int32 nodesId[numNodes]
  float64 radius
  int32 gridScale
  int32 numPolygon
  VectorLF3 polygon[numPolygon]
  int32 numPolyn
  VectorLF3 polyn[numPolyn]
  int32 numPolynu
  float64 polynu[numPolynu]
  boolean clockwise
  VectorLF3 center
  VectorLF3 xaxis
  VectorLF3 yaxis
  VectorLF3 w0axis
  VectorLF3 w1axis
  VectorLF3 w2axis
  VectorLF3 t0axis
  VectorLF3 t1axis
  VectorLF3 t2axis
  VectorLF3 raydir
  int32 vertexCount
  Vector3 verts[vertexCount] // version >= 4
  Vector2 uvs[vertexCount] // version >= 4
  Vector2 uv2s[vertexCount] // version >= 4
  int32 vkeys[vertexCount] // version >= 4
  int16 vAdjs[vertexCount * 6] // version >= 4
  int32 vertAttr[vertexCount] // version >= 4
  int32 numVertsq
  int16 vertsq[numVertsq]
  int32 numVertsqOffset
  int16 vertsqOffset[numVertsqOffset]
  int32 numNodecps
  int32 nodecps[numNodecps]
}

DysonRocket {
  int32 version = 0
  int32 id
  int32 nodeLayerId
  int32 nodeId
  int32 planetId
  float32 t
  float32 uSpeed
  VectorLF3 uPos
  Quaternion uRot
  Vector3 uVel
  Vector3 launch
}

DysonNodeRData {
  int32 version = 0
  int32 id
  int32 layerId
  Vector3 pos
  float32 angularVel
  Quaternion layerRot
}

GameAbnormalityData {
  int32 version = 0
  int32 reserved2 = 0
  int32 flag  // = 3, when flag = 1 or 2, method "ClearAbnormality" is called
  int32 numRow  // = 99
  GameAbnormalityDataRow row[numRow]
}

// inlined
GameAbnormalityDataRow {
  int32 numCol  // = 30
  AbnormalityData data[numCol]
}

AbnormalityData {
  uint8 version = 0
  uint8 protoId
  int64 abnormalTime if (protoId > 0)
  int32 numEvidences if (protoId > 0)
  int64 evidences[numEvidences] if (protoId > 0)
}

MilestoneSystem {
  int32 version = 0
  int32 numMilestoneDatas
  KeyValuePair<int32, MilestoneData> milestoneDatas[numMilestoneDatas]
}

MilestoneData {
  int32 version = 0
  int32 protoId
  int64 unlockTick
  JournalData journalData
}

WarningSystem {
  int32 version = 0
  int32 warningCapacity
  int32 warningCursor
  int32 warningRecycleCursor
  WarningPool warningPool[warningCursor - 1]
  int32 warningRecycle[warningRecycleCursor]
}

WarningPool {
  int32 version = 1
  int32 id
  int32 state
  int32 signalId
  int32 detailId // version >= 1
  int32 factoryId
  int32 astroId
  int32 objectId
  Vector3 localPos
}

EnemyDFGroundSystem {
  int32 version = 0
  int32 rtseed
  uint32 rtseed_lehmer
  int32 maxAssaultWaves
  DataPool<EnemyBuilderComponent> builders
  ObjectPool<DFGBaseComponent> bases
  DataPool<DFGConnectorComponent> connectors
  DataPool<DFGReplicatorComponent> replicators
  DataPool<DFGTurretComponent> turrets
  DataPool<DFGShieldComponent> shields
  DataPool<EnemyUnitComponent> units
}

EnemyBuilderComponent {
  uint8 version = 0
  int32 id
  int32 enemyId if (id > 0)
  int32 matter if (id > 0)
  int32 energy if (id > 0)
  int32 minMatter if (id > 0)
  int32 minEnergy if (id > 0)
  int32 maxMatter if (id > 0)
  int32 maxEnergy if (id > 0)
  int32 genMatter if (id > 0)
  int32 genEnergy if (id > 0)
  int32 sp if (id > 0)
  int32 spMax if (id > 0)
  int32 spMatter if (id > 0)
  int32 spEnergy if (id > 0)
  int16 state if (id > 0)
  int32 idleEnergy if (id > 0)
  int32 workEnergy if (id > 0)
  uint16 builderIndex if (id > 0)
  uint16 buildCursor if (id > 0)
  uint16 buildChance if (id > 0)
  uint16 buildCDTime if (id > 0)
}

DFGBaseComponent {
  uint8 version = 2
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 relayId if (id > 0)
  int32 relayEnemyId if (id > 0)
  int32 hiveAstroId if (id > 0)
  int32 ruinId if (id > 0)
  int32 ticks if (id > 0)
  int32 activeTicks if (id > 0) // version >= 1
  int32 turboTicks if (id > 0)
  int32 turboRepress if (id > 0)
  EnemyFormation forms[3] if (id > 0)
  EvolveData evolve if (id > 0)
  HatredList hatred if (id > 0)
  int32 incomingSkillsCursor if (id > 0)
  KeyValuePair<int32, int32> incomingSkills[incomingSkillsCursor] if (id > 0) // id, type
  int32 numPbuilders if (id > 0)
  GrowthPattern_DFGround_Builder pbuilder[numPbuilders] if (id > 0)
  int32 disableAssaultingAlert if (id > 0) // version >= 2
}

EnemyFormation {
  uint8 version = 0
  uint16 portCount
  uint16 vacancyCursor
  uint8 units[portCount]
  // only available when portCount <= 255, changed to uint16 on the other case
  uint8 vacancies_uint8[vacancyCursor] if (portCount <= 255)
  uint16 vacancies_uint16[vacancyCursor] if (portCount > 255)
}

EvolveData {
  uint8 version = 1
  int32 level
  int32 expl
  int32 expf
  int32 expp
  int32 exppshr
  int32 threat
  int32 maxThreat
  int32 threatshr
  int32 waves
  int32 waveTicks
  int32 waveAsmTicks // version >= 1
  int32 rankBase
}

HatredList {
  uint8 version = 0
  int32 maxTarget
  int32 maxValue
  int32 h1Target
  int32 h1Value
  int32 h2Target
  int32 h2Value
  int32 h3Target
  int32 h3Value
  int32 h4Target
  int32 h4Value
  int32 h5Target
  int32 h5Value
  int32 h6Target
  int32 h6Value
  int32 minTarget
  int32 minValue
}

GrowthPattern_DFGround_Builder {
  uint8 version = 0
  int16 protoId
  FlexibleInt instId
  int16 instBuilderId if (instId > 0)
  Vector3 pos
  Quaternion rot
  float32 length if (protoId == 8127) // isConn
  int32 matterNeeded
  int16 matterSpeed
  int16 numConnections
  int16 connections[numConnections]
  uint8 rank
}

DFGConnectorComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 baseId if (id > 0)
  float32 length if (id > 0)
  int32 matterSpeed if (id > 0)
  uint16 builderAId if (id > 0)
  uint16 builderBId if (id > 0)
}

DFGReplicatorComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int16 baseId if (id > 0)
  int16 productId if (id > 0)
  uint8 productFormId if (id > 0)
  uint16 productSpMatter if (id > 0)
  int32 productSpEnergy if (id > 0)
  uint16 productSpMax if (id > 0)
  uint16 turboSpeed if (id > 0)
  uint8 unitSupply if (id > 0)
  Vector3 productInitialPos if (id > 0)
  Quaternion productInitialRot if (id > 0)
  Vector3 productInitialVel if (id > 0)
  uint16 productInitialTick if (id > 0)
  uint16 productSp if (id > 0)
}

DFGTurretComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 baseId if (id > 0)
  int32 level if (id > 0)
  uint8 state if (id > 0) // EDFTurretState
  uint8 type if (id > 0) // EDFTurretType
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  Vector3 localDir if (id > 0)
  float32 muzzleY if (id > 0)
  int32 muzzleReset if (id > 0)
  float32 attackRange if (id > 0)
  float32 sensorRange if (id > 0)
  float32 rangeInc if (id > 0)
  int32 fire if (id > 0)
  int32 heat if (id > 0)
  int32 aimt if (id > 0)
}

DFGShieldComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 baseId if (id > 0)
}

EnemyUnitComponent {
  uint8 version = 2
  FlexibleInt id
  FlexibleInt planetId
  FlexibleInt enemyId
  int16 protoId
  int16 level
  uint16 baseId
  uint16 baseEnemyId
  uint8 behavior
  FlexibleInt stateTick
  int16 fire0
  int16 fire1
  int16 fire2
  int16 heat
  Vector3 repulsion
  TargetQueue assaults
  HatredList hatred
  int32 blockSkillId // version >= 1
  int32 blockSkillType // version >= 1
  float32 disturbValue // version >= 2
}

TargetQueue {
  uint8 version = 0
  uint8 count
  Vector3 target if (count > 0)
  Vector3 tar1 if (count > 1)
  int32 targetAstroId
  int32 targetObject
  int32 threatCarry
}

CombatGroundSystem {
  int32 version = 0
  DataPool<UnitComponent> units
  DataPool<FleetComponent> fleets
  ObjectPool<CombatModuleComponent> combatModules
}

UnitComponent {
  uint8 version = 0
  int32 id
  int32 craftId
  int16 protoId
  boolean isShooting0
  boolean isShooting1
  int32 fire0
  int32 fire1
  uint8 muzzleIndex0
  uint8 muzzleIndex1
  boolean isRetreating
  boolean isCharging
  int32 currentInitializeValue
  int32 hpStorage
  boolean adjustEngageRange
  uint8 behavior // EUnitBehavior
  HatredList hatred
}

FleetComponent {
  int32 version = 0
  int32 id
  int32 craftId
  int32 owner
  HatredList hatred
  int32 targetType // ETargetType
  int32 targetId
  int32 targetAstroId
  VectorLF3 targetPos
  boolean dispatch
  int16 currentAssembleUnitsCount
  int16 currentChargingUnitsCount
}

DefenseSystem {
  int32 version = 2
  DataPool<TurretComponent> turrets
  DataPool<BeaconComponent> beacons
  DataPool<FieldGeneratorComponent> fieldGenerators
  ObjectPool<BattleBaseComponent> battleBases
  int32 localGlobalTargetCursor // version >= 1
  int32 otherGlobalTargetCursor // version >= 1
  TimedSkillTarget globalTargets[otherGlobalTargetCursor]
  int32 engagingGaussCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  int32 engagingLaserCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  int32 engagingCannonCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  int32 engagingMissileCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  int32 engagingPlasmaCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  int32 engagingLocalPlasmaCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0) version >= 2
  int32 engagingTurretTotalCount if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
  boolean turretEnableDefenseSpace if (turrets.cursor - turrets.recycleCursor - 1 > 0) // if (turrets.count > 0)
}

TimedSkillTarget {
  int32 version = 1
  int32 id
  int32 astroId
  int32 type // ETargetType
  int32 lifeTick
}

TurretComponent {
  int32 version = 3
  int32 id
  int32 entityId
  int32 pcId
  int32 projectileId
  int32 targetBeltId
  int32 targetType // ETargetType
  int32 targetId
  int32 targetAstroId
  Vector3 localDir
  Vector3 localTargetDir // version >= 1
  int32 muzzleReset
  uint8 muzzleIndex
  uint8 group
  uint8 vsCaps // VSLayerMask
  uint8 vsSettings // VSLayerMask
  boolean isAiming
  boolean isLockingTarget
  boolean activeSearch
  uint8 type // ETurretType
  uint8 ammoType // EAmmoType
  uint8 currentBulletInc // version >= 2
  int16 supernovaTick
  int32 roundFire
  int32 muzzleFire
  float32 supernovaStrength
  uint8 phasePos // version >= 3
  int32 hatred0Target
  int32 hatred0Value
  int16 itemId
  int16 itemCount
  int16 itemInc
  int16 bulletCount
  int16 itemBulletCount
  int32 bulletDamage
  int32 aimt
  int32 totalKillCount
  int64 totalDamage
  Vector2 currentAngleVelocity
}

BeaconComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 pnId
  int32 fire
}

FieldGeneratorComponent {
  int32 version = 0
  int32 id
  int32 entityId
  int32 pcId
  Quaternion holder
  int64 energy
  int64 energyCapacity
  int64 energyRequired0
  int64 energyRequired1
}

BattleBaseComponent {
  int32 version = 1
  int32 id
  int32 entityId
  int32 pcId
  int32 storageId
  int32 constructionModuleId
  int32 combatModuleId
  int64 energy
  int64 energyPerTick
  int64 energyMax
  boolean autoPickEnabled
  float32 constructRange
  float32 pickRange // version >= 1
}

PlanetATField {
  int32 version = 0
  int64 energy
  int64 energyMax
  int64 energyMaxTarget
  int32 recoverCD
  int32 rigidTime
}

ConstructionSystem {
  int32 version = 1
  ObjectPool<ConstructionModuleComponent> constructionModules
  DataPool<DroneComponent> drones
  DataPool<ConstructStat> constructStats
}

DroneComponent {
  int32 version = 1
  int32 id
  int32 craftId
  int32 owner
  int32 stage
  int32 priority
  float32 progress
  int32 movement
  int32 targetObjectId
  int32 nextTarget1ObjectId // version >= 1
  int32 nextTarget2ObjectId // version >= 1
  int32 nextTarget3ObjectId // version >= 1
  Vector3 targetPos
  Vector3 initialVector
}

ConstructStat {
  uint8 version = 0
  int32 id
  int32 entityId
  float32 damageRate
  float32 damageRateLastFrame
  int32 repairerCount
  int32 repairerModuleId
  float32 repairerValue
}

SpaceSector {
  int32 version = 1
  int32 numAstros
  int32 astroCursor
  AstroData astros[astroCursor - 1]
  int32 enemyCapacity
  int32 enemyCursor
  int32 enemyRecycleCursor
  EnemyData enemyPool[enemyCursor - 1]
  int32 enemyRecycle[enemyRecycleCursor]
  AnimData enemyAnimPool[enemyCursor - 1]
  int32 craftCapacity
  int32 craftCursor
  int32 craftRecycleCursor
  CraftData craftPool[craftCursor - 1]
  int32 craftRecycle[craftRecycleCursor]
  AnimData craftAnimPool[craftCursor - 1]
  DataPool<SpaceRuinData> spaceRuins // version >= 1
  SkillSystem skillSystem
  int32 numDfHives
  EnemyDFHiveSystem_ExportStruct dfHives[numDfHives]
  CombatSpaceSystem combatSpaceSystem
}

// inlined
AstroData {
  int32 id
  int32 type if (id > 0) // EAstroType
  int32 parentId if (id > 0)
  VectorLF3 uPos if (id > 0)
  VectorLF3 uPosNext if (id > 0)
  Quaternion uRot if (id > 0)
  Quaternion uRotNext if (id > 0)
  float32 uRadius
}

SpaceRuinData {
  // do nothing
}

SkillSystem {
  int32 version = 3
  DataPool<CombatStat> combatStats
  int32 numRemovedSkillTargets // version >= 1
  SkillTarget removedSkillTargets[numRemovedSkillTargets] // version >= 1
  DataPoolRenderer<LocalGeneralProjectile> localGeneralProjectile
  DataPoolRenderer<LocalLaserContinuous> localLaserContinuous
  DataPoolRenderer<LocalLaserOneShot> localLaserOneShots
  DataPool<LocalCannonade> localCannonades
  DataPoolRenderer<LocalDisturbingWave> localDisturbingWaves // version >= 3
  DataPoolRenderer<GeneralProjectile> generalProjectile
  DataPool<SpaceLaserOneShot> spaceLaserOneShot
  DataPool<SpaceLaserSweep> spaceLaserSweep
  DataPool<Bomb_Explosive> explosiveUnitBombs // version >= 3
  DataPool<Bomb_EMCapsule> emCapsuleBombs // version >= 3
  DataPool<Bomb_Liquid> liquidBombs // version >= 3
  DataPoolRenderer<LocalLaserOneShot> raiderLasers
  DataPoolRenderer<LocalGeneralProjectile> rangerPlasmas
  DataPoolRenderer<LocalGeneralProjectile> guardianPlasmas
  DataPoolRenderer<LocalLaserOneShot> dfgTowerLasers
  DataPoolRenderer<LocalGeneralProjectile> dfgTowerPlasmas
  DataPoolRenderer<LocalLaserOneShot> fighterLasers
  DataPoolRenderer<LocalGeneralProjectile> fighterPlasmas
  DataPoolRenderer<LocalGeneralProjectile> fighterShieldPlasmas
  DataPoolRenderer<LocalGeneralProjectile> turretGaussProjectiles
  DataPoolRenderer<LocalLaserContinuous> turretLaserContinuous
  DataPool<LocalCannonade> turretCannonades
  DataPoolRenderer<GeneralProjectile> turretPlasmas
  DataPoolRenderer<GeneralProjectile> turretLocalPlasmas // version >= 2
  DataPool<GeneralMissile> turretMissiles
  VFTrailRenderer turretMissileTrails
  DataPoolRenderer<LocalDisturbingWave> turretDisturbingWave // version >= 3
  DataPoolRenderer<GeneralProjectile> dfsTowerPlasmas
  DataPool<SpaceLaserOneShot> dfsTowerLasers
  DataPoolRenderer<GeneralProjectile> lancerSpacePlasma
  DataPool<SpaceLaserOneShot> lancerLaserOneShots
  DataPool<SpaceLaserSweep> lancerLaserSweeps
  DataPoolRenderer<GeneralExpImpProjectile> humpbackProjectiles
  DataPool<SpaceLaserOneShot> warshipTypeFLasers
  DataPoolRenderer<GeneralProjectile> warshipTypeFPlasmas
  DataPoolRenderer<GeneralProjectile> warshipTypeAPlasmas
  DataPoolRenderer<LocalGeneralProjectile> mechaLocalGaussProjectiles
  DataPoolRenderer<GeneralProjectile> mechaSpaceGaussProjectiles
  DataPoolRenderer<LocalLaserOneShot> mechaLocalLaserOneShots
  DataPool<SpaceLaserOneShot> mechaSpaceLaserOneShots
  DataPool<LocalCannonade> mechaLocalCannonades
  DataPool<GeneralCannonade> mechaSpaceCannonades
  DataPoolRenderer<GeneralProjectile> mechaPlasmas
  DataPool<GeneralMissile> mechaMissiles
  VFTrailRenderer mechaMissileTrails
  DataPoolRenderer<GeneralShieldBurst> mechaShieldBursts // version >= 3
  int16 numHitEffects
  HitEffect_ExportStruct hitEffects[numHitEffects]
}

HitEffect_ExportStruct {
  int16 id
  DataPoolRenderer<ParticleData> data if (id != 0) // TODO: support recursively template class: ExportStruct<int16, DataPoolRenderer<ParticleData>>
}

CombatStat {
  uint8 version = 1
  int32 id
  int32 hp
  int32 hpMax
  int32 hpRecover
  int32 hpIncoming
  int32 originAstroId
  int32 astroId
  int32 objectType
  int32 objectId
  int32 warningId
  uint8 dynamic
  Vector3 localPos
  float32 size
  uint8 lastCasterType // ETargetType
  int32 lastCasterId
  int32 lastCasterAstroId
  ImpactData lastImpact
}

ImpactData {
  uint8 version = 0
  uint8 hasMass
  float32 mass if (hasMass > 0)
  Vector3 point if (hasMass > 0)
  Vector3 velocity if (hasMass > 0)
}

SkillTarget {
  int32 id
  int32 astroId
  int32 type // ETargetType
}

// loop construction
EnemyDFHiveSystem_ExportStruct {
  int32 magic
  EnemyDFHiveSystem data if (magic == 19884)
  EnemyDFHiveSystem_ExportStruct nextSibling if (magic == 19884)
}

EnemyDFHiveSystem {
  int32 version = 3
  int32 hiveAstroId
  int32 seed
  int32 rtseed
  int32 numPbuilders
  GrowthPattern_DFSpace_Builder pbuilders[numPbuilders]
  boolean realized
  boolean isEmpty
  int32 ticks
  int32 turboTicks
  int32 turboRepress
  boolean matterStatComplete
  int32 matterProductStat
  int32 matterConsumeStat
  int32 matterProduction
  int32 matterConsumption
  int32 rootEnemyId
  boolean isCarrierRealized
  int32 tindersInTransit
  float32 lancerAssaultCountBase // version >= 1
  int32 relayNeutralizedCounter // version >= 3
  DataPool<EnemyBuilderComponent> builders
  DataPool<DFSCoreComponent> cores
  DataPool<DFSNodeComponent> nodes
  DataPool<DFSConnectorComponent> connectors
  DataPool<DFSReplicatorComponent> replicators
  DataPool<DFSGammaComponent> gammas
  DataPool<DFSTurretComponent> turrets
  ObjectPool<DFRelayComponent> relays
  DataPool<DFTinderComponent> tinders
  DataPool<EnemyUnitComponent> units
  int32 numIdleRelayIds
  int32 idleRelayCount
  int32 idleRelayIds[idleRelayCount]
  int32 numIdleTinderIds
  int32 idleTinderCount
  int32 idleTinderIds[idleTinderCount]
  EnemyFormation forms[3]
  EvolveData evolve
  HatredList hatred
  HatredList hatredAstros
}

GrowthPattern_DFSpace_Builder {
  uint8 version = 0
  int16 protoId
  FlexibleInt instId
  int16 instBuilderId if (instId > 0)
  FlexibleInt savedWorkProgress if (protoId != 8109 and protoId != 8110) // !isConn
  Vector3 pos
  Quaternion rot
  uint8 size if (protoId == 8109 or protoId == 8110) // isConn
  float32 length if (protoId == 8109 or protoId == 8110) // isConn
  int32 matterNeeded
  int16 matterSpeed
  int16 numConnections
  int16 connections[numConnections]
  uint8 rank
}

DFSCoreComponent {
  uint8 version = 1
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 coreIndex if (id > 0)
  int32 buildRelaySpMatter if (id > 0)
  int32 buildRelaySpEnergy if (id > 0)
  int32 buildRelaySp if (id > 0)
  int32 buildRelaySpMax if (id > 0)
  int32 buildRelayCount if (id > 0)
  int32 buildTinderSpMatter if (id > 0)
  int32 buildTinderSpEnergy if (id > 0)
  int32 buildTinderSp if (id > 0)
  int32 buildTinderSpMax if (id > 0)
  int32 buildTinderCount if (id > 0)
  int32 buildTinderTriggerMinTick if (id > 0)
  int32 buildTinderTriggerKeyTick if (id > 0)
  float32 buildTinderTriggerProbability if (id > 0)
  int32 disableAssaultingAlert if (id > 0) // version >= 1
}

DFSNodeComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
}

DFSConnectorComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  float32 size if (id > 0)
  float32 length if (id > 0)
  int32 matterSpeed if (id > 0)
  uint16 builderAId if (id > 0)
  uint16 builderBId if (id > 0)
}

DFSReplicatorComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int16 productId if (id > 0)
  uint8 productFormId if (id > 0)
  uint16 productSpMatter if (id > 0)
  int32 productSpEnergy if (id > 0)
  uint16 productSpMax if (id > 0)
  uint16 turboSpeed if (id > 0)
  uint8 unitSupply if (id > 0)
  Vector3 productInitialPos if (id > 0)
  Quaternion productInitialRot if (id > 0)
  Vector3 productInitialVel if (id > 0)
  uint16 productInitialTick if (id > 0)
  uint16 productSp if (id > 0)
}

DFSGammaComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
}

DFSTurretComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int32 level if (id > 0)
  uint8 state if (id > 0) // EDFTurretState
  uint8 type if (id > 0) // EDFTurretType
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  Vector3 localDir if (id > 0)
  float32 muzzleY if (id > 0)
  int32 muzzleReset if (id > 0)
  float32 attackRange if (id > 0)
  float32 sensorRange if (id > 0)
  float32 rangeInc if (id > 0)
  int32 fire if (id > 0)
  int32 heat if (id > 0)
  int32 aimt if (id > 0)
}

DFRelayComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int16 dockIndex if (id > 0)
  int32 hiveAstroId if (id > 0)
  int32 targetAstroId if (id > 0)
  Vector3 targetLPos if (id > 0)
  float32 targetYaw if (id > 0)
  int8 baseState if (id > 0)
  int16 baseId if (id > 0)
  int32 baseTicks if (id > 0)
  EvolveData baseEvolve if (id > 0)
  int16 baseRespawnCD if (id > 0)
  int8 direction if (id > 0)
  int8 stage if (id > 0)
  float32 uSpeed if (id > 0)
  float32 param0 if (id > 0)
  uint8 num // = 6
  DFCarrierData carrierDatas[num]
  int32 searchAstroId
  int32 searchBaseId
  int32 searchChance
  Vector3 searchLPos
  int32 searchEntityCursor
}

DFCarrierData {
  uint8 version = 0
  int8 stage
  int8 direction
  int32 matter
  int32 energy
  VectorLF3 upos
  Quaternion urot
  float32 speed
  boolean nearStart
  float32 param0
  float32 param1
  int32 hp
}

DFTinderComponent {
  uint8 version = 0
  uint16 id
  int32 enemyId if (id > 0)
  int32 builderId if (id > 0)
  int16 dockIndex if (id > 0)
  int32 originHiveAstroId if (id > 0)
  int32 targetHiveAstroId if (id > 0)
  int16 direction if (id > 0)
  int16 stage if (id > 0)
  float32 uSpeed if (id > 0)
  float32 param0 if (id > 0)
}

LocalGeneralProjectile {
  uint8 version = 1
  int32 id
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 targetCombatStatId if (id > 0)
  Vector3 pos if (id > 0)
  Vector3 dir if (id > 0)
  float32 speed if (id > 0)
  int32 damage if (id > 0)
  int32 damageIncoming if (id > 0) // version >= 1
  int16 mask if (id > 0) // ETargetTypeMask
  int16 life if (id > 0)
  int16 lifemax if (id > 0)
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 highlightValue if (id > 0)
}

LocalLaserContinuous {
  uint8 version = 0
  int32 id
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 hitId if (id > 0)
  Vector3 beginPos if (id > 0)
  Vector3 endPos if (id > 0)
  Vector3 finalPos if (id > 0)
  int32 damage if (id > 0)
  float32 damageScale if (id > 0)
  float32 fade if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
}

LocalLaserOneShot {
  uint8 version = 0
  int32 id
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 hitId if (id > 0)
  Vector3 beginPos if (id > 0)
  Vector3 endPos if (id > 0)
  Vector3 deltaPos if (id > 0)
  int32 damage if (id > 0)
  int16 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int16 extendedDistWhenMiss if (id > 0)
}

VFTrailRenderer {
  uint8 version = 0
  int32 trailStride
  int32 trailCursor
  int32 numSmokePool
  SmokeData smokePool[numSmokePool - trailStride] // TODO: check array len
}

SmokeData {
  uint8 version = 0
  uint32 type
  uint32 createTime
  int32 astroId if (createTime > 0)
  Vector3 pos if (createTime > 0)
  Vector3 vel if (createTime > 0)
}

ParticleData {
  uint8 version = 0
  int32 id
  int32 time if (id > 0)
  int32 duration if (id > 0)
  int32 astroId if (id > 0)
  VectorLF3 upos if (id > 0 and astroId == 0)
  Vector3 pos if (id > 0)
  Vector3 dir if (id > 0)
  Vector3 vel if (id > 0)
  float32 inertia if (id > 0)
  float32 size if (id > 0)
  float32 param0 if (id > 0)
}

CombatSpaceSystem {
  int32 version = 0
  DataPool<UnitComponent> units
  DataPool<FleetComponent> fleets
}

LocalCannonade {
  uint8 version = 0
  int32 id
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 minorHitIndex if (id > 0)
  Vector3 targetPos if (id > 0)
  float32 distance if (id > 0)
  float32 speed if (id > 0)
  float32 progress if (id > 0)
  int32 damage if (id > 0)
  float32 blastRadius0 if (id > 0)
  float32 blastRadius1 if (id > 0)
  float32 blastFalloff if (id > 0)
  uint8 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
}

LocalDisturbingWave {
  int32 version = 0
  int32 id
  int32 astroId if (id > 0)
  int16 protoId if (id > 0)
  Vector3 center if (id > 0)
  Quaternion rot if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  int32 casterId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  float32 disturbStrength if (id > 0)
  float32 thickness if (id > 0)
  float32 diffusionSpeed if (id > 0)
  float32 diffusionMaxRadius if (id > 0)
  int16 life if (id > 0)
  float32 currentDiffuseRadius if (id > 0)
}

GeneralProjectile {
  uint8 version = 2
  int32 id
  int32 astroId if (id > 0)
  VectorLF3 uPos if (id > 0)
  Vector3 uVel if (id > 0)
  Vector3 uVelObj if (id > 0)
  int32 damage if (id > 0)
  float32 damageRange if (id > 0) // version >= 1
  float32 damageFalloff if (id > 0) // version >= 1
  int32 damageIncoming if (id > 0) // version >= 2
  int32 zero if (id > 0) = 0 default (0)
  int16 life if (id > 0)
  int16 lifemax if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  int16 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  int32 targetAstroId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 targetCombatStatId if (id > 0)
}

SpaceLaserOneShot {
  uint8 version = 0
  int32 id
  int32 astroId if (id > 0)
  VectorLF3 beginPosU if (id > 0)
  VectorLF3 endPosU if (id > 0)
  Vector3 muzzleOffset if (id > 0)
  Vector3 deltaPos if (id > 0)
  float32 endVelU if (id > 0)
  int32 damage if (id > 0)
  int16 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  int32 targetAstroId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int16 extendedDistWhenMiss if (id > 0)
  int32 hitIndex if (id > 0)
}

SpaceLaserSweep {
  uint8 version = 0
  int32 id
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  Vector3 beginPos if (id > 0)
  Vector3 sweepFrom if (id > 0)
  Vector3 sweepTo if (id > 0)
  Vector3 muzzleOffset if (id > 0)
  int16 life if (id > 0)
  int16 lifemax if (id > 0)
  int32 damage if (id > 0)
  int16 damageInterval if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
}

Bomb_Explosive {
  int32 version = 0
  int32 id
  int32 protoId if (id > 0)
  int32 nearPlanetAstroId if (id > 0)
  int32 nearStarId if (id > 0)
  VectorLF3 uPos if (id > 0)
  Quaternion uRot if (id > 0)
  VectorLF3 uVel if (id > 0)
  Vector3 uAgl if (id > 0)
  int32 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  int32 abilityValue if (id > 0)
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 casterType if (id > 0) // ETargetType
}

Bomb_EMCapsule {
  int32 version = 0
  int32 id
  int32 protoId if (id > 0)
  int32 nearPlanetAstroId if (id > 0)
  int32 nearStarId if (id > 0)
  VectorLF3 uPos if (id > 0)
  Quaternion uRot if (id > 0)
  VectorLF3 uVel if (id > 0)
  Vector3 uAgl if (id > 0)
  int32 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  int32 abilityValue if (id > 0)
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 casterType if (id > 0) // ETargetType
}

Bomb_Liquid {
  int32 version = 0
  int32 id
  int32 protoId if (id > 0)
  int32 nearPlanetAstroId if (id > 0)
  int32 nearStarId if (id > 0)
  VectorLF3 uPos if (id > 0)
  Quaternion uRot if (id > 0)
  VectorLF3 uVel if (id > 0)
  Vector3 uAgl if (id > 0)
  int32 life if (id > 0)
  int32 abilityValue if (id > 0)
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 casterType if (id > 0) // ETargetType
}

GeneralMissile {
  uint8 version = 2
  int32 id
  int32 nearAstroId if (id > 0)
  int32 targetCombatStatId if (id > 0)
  VectorLF3 uPos if (id > 0)
  VectorLF3 lastTargetPos if (id > 0) // version >= 1
  int32 lastTargetCurrentAstroId if (id > 0) // version >= 1
  Quaternion uRot if (id > 0)
  Vector3 uVel if (id > 0)
  Vector3 casterVel if (id > 0)
  float32 moveAcc if (id > 0)
  float32 turnAcc if (id > 0)
  int32 damage if (id > 0)
  int32 damageIncoming if (id > 0) // version >= 2
  int16 mask if (id > 0) // ETargetTypeMask
  int16 life if (id > 0)
  int16 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  int32 targetAstroId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 modelIndex if (id > 0)
}

GeneralExpImpProjectile {
  uint8 version = 0
  int32 id if (id > 0)
  int32 astroId if (id > 0)
  VectorLF3 uPos if (id > 0)
  Vector3 uVel if (id > 0)
  Vector3 uVelObj if (id > 0)
  int32 damage if (id > 0)
  int16 life if (id > 0)
  int16 lifemax if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  int16 targetType if (id > 0) // ETargetType
  int32 targetId if (id > 0)
  int32 targetAstroId if (id > 0)
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  int32 hitIndex if (id > 0)
}

GeneralCannonade {
  uint8 version = 0
  int32 id if (id > 0)
  int32 astroId if (id > 0)
  int32 hitIndex if (id > 0)
  int32 minorHitIndex if (id > 0)
  VectorLF3 targetUPos if (id > 0)
  float32 distance if (id > 0)
  float32 speed if (id > 0)
  float32 progress if (id > 0)
  int32 damage if (id > 0)
  float32 blastRadius0 if (id > 0)
  float32 blastRadius1 if (id > 0)
  float32 blastFalloff if (id > 0)
  uint8 life if (id > 0)
  int16 mask if (id > 0) // ETargetTypeMask
  uint8 casterType if (id > 0) // ETargetType
  int32 casterId if (id > 0)
  int32 casterAstroId if (id > 0)
  Vector3 targetVel if (id > 0)
}

GeneralShieldBurst {
  uint8 version = 1
  int32 id
  int32 astroId
  VectorLF3 upos
  Vector3 rpos
  float32 range
  int32 damageTotal
  int32 damagePerObject
  int32 damageDone
  int32 damageInterval
  float32 damageFalloff // version >= 1
  int32 life
  int32 lifeMax
  int16 mask // ETargetTypeMask
  uint8 casterType // ETargetType
  int32 casterId
  int32 casterAstroId
}
